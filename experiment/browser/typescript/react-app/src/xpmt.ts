/* tslint:disable */
/* eslint-disable */
/**
 * Xpmt - A strong typed wrapper for your Experiment
 *
 * This file is generated by Amplitude.
 * To update run 'ampli exp -t token -d deployment-key'
 *
 * Required dependencies: @amplitude/experiment-js-client
 * Experiment Plan Version: 0
 * Build: 1.0.0
 * Runtime: browser:typescript
 */

import { Experiment, ExperimentClient, ExperimentConfig, ExperimentUser } from '@amplitude/experiment-js-client';

export type BaseExperiment = {
  key: string;
  name: string;
}

export type CodegenStringExperimentControl = { key: 'control', payload: string };
export type CodegenStringExperimentTreatment = { key: 'treatment', payload: string };
export type CodegenStringExperimentVariants = BaseExperiment & {
  control?: CodegenStringExperimentControl;
  treatment?: CodegenStringExperimentTreatment;
}
export class CodegenStringExperiment implements CodegenStringExperimentVariants {
  key = 'codegen-string-experiment';
  name = "Codegen String Experiment";

  constructor(
    public control?: CodegenStringExperimentControl,
    public treatment?: CodegenStringExperimentTreatment,
  ) {}
}

export type CodegenExperimentControl = { key: 'control', payload: any };
export type CodegenExperimentTreatment = { key: 'treatment', payload: any };
export type CodegenExperimentVariants = BaseExperiment & {
  control?: CodegenExperimentControl;
  treatment?: CodegenExperimentTreatment;
}
export class CodegenExperiment implements CodegenExperimentVariants {
  key = 'codegen-experiment';
  name = "Codegen Experiment";

  constructor(
    public control?: CodegenExperimentControl,
    public treatment?: CodegenExperimentTreatment,
  ) {}
}

export class Xpmt {
  /**
   * Initialize experiment.
   *
   * @param apiKey Experiment deployment key.
   * @param config Experiment client configuration.
   */
  public static initialize(apiKey: string, config?: ExperimentConfig): Xpmt {
    const client = Experiment.initialize(apiKey, config);
    return new Xpmt(client);
  }

  /**
   * The underlying experiment client.
   */
  public readonly client: ExperimentClient;

  /**
   * Fetch variants for a user.
   *
   * This user is merged with the user provided by the client's user provider.
   *
   * @param user The user to fetch variants for.
   */
  public async fetch(user?: ExperimentUser): Promise<Xpmt> {
    await this.client.fetch(user)
    return this;
  }

  /* Private */

  private constructor(client: ExperimentClient) {
    this.client = client;
  }

  private getTypedVariant<T extends BaseExperiment>(exp: T) {
    const variant = this.client.variant(exp.key);
    if (variant.value) {
      (exp as any)[variant.value] = { payload: variant.payload };
    }

    return exp;
  }

  public codegenStringExperiment(): CodegenStringExperiment {
    return this.getTypedVariant(new CodegenStringExperiment());
  }

  public codegenExperiment(): CodegenExperiment {
    return this.getTypedVariant(new CodegenExperiment());
  }

}
