/**
 * This file is generated by Amplitude.
 * To update run 'yarn codegen'
 *
 * Ampli - A strong typed wrapper for your Analytics
 * 6c3a9cd0a22daafe3278346608a816cf
 *
 */
import {
  Event, AmpliMethod, IdentifyOptions, TrackOptions, Extra, AmpIdentify, Middleware, Payload, PayloadInternal
} from './amplitude-browser';
import amplitude, { AmplitudeClient } from 'amplitude-js';

export interface EventProperties {
    Context?:                       ContextProperties;
    EventMaxIntForTest?:            EventMaxIntForTestProperties;
    EventNoProperties?:             EventNoPropertiesProperties;
    EventObjectTypes?:              EventObjectTypesProperties;
    EventWithAllProperties?:        EventWithAllPropertiesProperties;
    EventWithArrayTypes?:           EventWithArrayTypesProperties;
    EventWithConstTypes?:           EventWithConstTypesProperties;
    EventWithDifferentCasingTypes?: EventWithDifferentCasingTypesProperties;
    EventWithEnumTypes?:            EventWithEnumTypesProperties;
    EventWithOptionalArrayTypes?:   EventWithOptionalArrayTypesProperties;
    EventWithOptionalProperties?:   EventWithOptionalPropertiesProperties;
    Group?:                         GroupProperties;
    Identify?:                      IdentifyProperties;
}

export interface ContextProperties {
}

/**
 * Event to test schema validation
 */
export interface EventMaxIntForTestProperties {
    /**
     * property to test schema validation
     */
    intMax10: number;
}

/**
 * Event w no properties description
 */
export interface EventNoPropertiesProperties {
}

/**
 * Event with Object and Object Array
 */
export interface EventObjectTypesProperties {
    /**
     * Property Object Type
     */
    requiredObject: { [key: string]: any };
    /**
     * Property Object Array Type
     */
    requiredObjectArray: { [key: string]: any }[];
}

/**
 * Event w all properties description
 */
export interface EventWithAllPropertiesProperties {
    /**
     * Event 2 Property - Optional String    *     * Examples:    * Some string, or another
     */
    optionalString?: string;
    /**
     * Event 2 Property - Array
     */
    requiredArray: string[];
    /**
     * Event 2 Property - Boolean
     */
    requiredBoolean: boolean;
    /**
     * Event 2 Property - Enum
     */
    requiredEnum: RequiredEnum;
    /**
     * Event 2 Property - Integer    *     * Examples:    * 5, 4, 3
     */
    requiredInteger: number;
    /**
     * Event 2 Property - Number
     */
    requiredNumber: number;
    /**
     * Event 2 Property - String
     */
    requiredString: string;
}

/**
 * Event 2 Property - Enum
 */
export enum RequiredEnum {
    Enum1 = "Enum1",
    Enum2 = "Enum2",
}

/**
 * Description for event with Array Types
 */
export interface EventWithArrayTypesProperties {
    /**
     * description for required boolean array
     */
    requiredBooleanArray: boolean[];
    /**
     * Description for required number array
     */
    requiredNumberArray: number[];
    /**
     * Description for required object array
     */
    requiredObjectArray: { [key: string]: any }[];
    /**
     * description for required string array
     */
    requiredStringArray: string[];
}

/**
 * Description for event with const types
 */
export interface EventWithConstTypesProperties {
}

/**
 * Description for case with space
 */
export interface EventWithDifferentCasingTypesProperties {
    /**
     * Description for enum with space
     */
    "enum with space": EnumWithSpace;
    /**
     * description_for_enum_snake_case
     */
    enum_snake_case: EnumSnakeCase;
    /**
     * descriptionForEnumCamelCase
     */
    enumCamelCase: EnumCamelCase;
    /**
     * DescirptionForEnumPascalCase
     */
    EnumPascalCase: EnumPascalCase;
    /**
     * Description for case with space
     */
    "property with space": string;
    /**
     * Description_for_snake_case
     */
    property_with_snake_case: string;
    /**
     * descriptionForCamelCase
     */
    propertyWithCamelCase: string;
    /**
     * DescriptionForPascalCase
     */
    PropertyWithPascalCase: string;
}

/**
 * DescirptionForEnumPascalCase
 */
export enum EnumPascalCase {
    EnumPascalCase = "EnumPascalCase",
}

/**
 * Description for enum with space
 */
export enum EnumWithSpace {
    EnumWithSpace = "enum with space",
}

/**
 * descriptionForEnumCamelCase
 */
export enum EnumCamelCase {
    EnumCamelCase = "enumCamelCase",
}

/**
 * description_for_enum_snake_case
 */
export enum EnumSnakeCase {
    EnumSnakeCase = "enum_snake_case",
}

/**
 * Description for event with enum types
 */
export interface EventWithEnumTypesProperties {
    /**
     * Description for required enum
     */
    "optional enum"?: OptionalEnum;
    /**
     * Description for optional enum
     */
    "required enum": RequiredEnumEnum;
}

/**
 * Description for required enum
 */
export enum OptionalEnum {
    OptionalEnum1 = "optional enum 1",
    OptionalEnum2 = "optional enum 2",
}

/**
 * Description for optional enum
 */
export enum RequiredEnumEnum {
    RequiredEnum1 = "required enum 1",
    RequiredEnum2 = "required enum 2",
}

/**
 * Description for event with optional array types
 */
export interface EventWithOptionalArrayTypesProperties {
    /**
     * Description for optional boolean array
     */
    optionalBooleanArray?: boolean[];
    /**
     * Description for optional object array
     */
    optionalJSONArray?: { [key: string]: any }[];
    /**
     * Description for optional number array
     */
    optionalNumberArray?: number[];
    /**
     * Description for optional string array
     */
    optionalStringArray?: string[];
}

/**
 * Event w optional properties description
 */
export interface EventWithOptionalPropertiesProperties {
    optionalArrayNumber?: number[];
    optionalArrayString?: string[];
    optionalBoolean?:     boolean;
    optionalNumber?:      number;
    /**
     * Optional String property description
     */
    optionalString?: string;
}

export interface GroupProperties {
    /**
     * Description for group optionalString
     */
    optionalString?: string;
    /**
     * Description for group requiredBoolean
     */
    requiredBoolean: boolean;
}

export interface IdentifyProperties {
    /**
     * Description for identify optionalArray
     */
    optionalArray?: string[];
    /**
     * Description for identify requiredNumber
     */
    requiredNumber: number;
}


/**
 * Event Class Context
 */
export class Context implements Event {
  name = 'Context';
  id = 'context';
  version = '0.0.0';
  constructor() {}
}
/**
 * Event Class Identify
 */
export class Identify implements Event {
  name = 'Identify';
  id = 'identify';
  version = '0.0.0';
  properties: IdentifyProperties;

  constructor(properties: IdentifyProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class Group
 */
export class Group implements Event {
  name = 'Group';
  id = 'group';
  version = '0.0.0';
  properties: GroupProperties;

  constructor(properties: GroupProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventMaxIntForTest
 */
export class EventMaxIntForTest implements Event {
  name = 'EventMaxIntForTest';
  id = 'aa0f08ac-8928-4569-a524-c1699e7da6f4';
  version = '1.0.0';
  properties: EventMaxIntForTestProperties;

  constructor(properties: EventMaxIntForTestProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventNoProperties
 */
export class EventNoProperties implements Event {
  name = 'Event No Properties';
  id = '26af925a-be3a-40e5-947d-33da66a5352f';
  version = '1.0.0';
  constructor() {}
}
/**
 * Event Class EventObjectTypes
 */
export class EventObjectTypes implements Event {
  name = 'Event Object Types';
  id = 'aea72ecc-5a10-4bd7-99a6-81a464aabaed';
  version = '1.0.0';
  properties: EventObjectTypesProperties;

  constructor(properties: EventObjectTypesProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventWithAllProperties
 */
export class EventWithAllProperties implements Event {
  name = 'Event With All Properties';
  id = '311ba144-8532-4474-a9bd-8b430625e29a';
  version = '1.0.0';
  properties: EventWithAllPropertiesProperties & {
    "requiredConst": "some-const-value"
  };

  constructor(properties: EventWithAllPropertiesProperties) {
    this.properties = {
      ...properties,
      'requiredConst': "some-const-value",
    };
  }
}
/**
 * Event Class EventWithArrayTypes
 */
export class EventWithArrayTypes implements Event {
  name = 'Event With Array Types';
  id = '5ded19cd-6015-441b-a2be-f954425be1fe';
  version = '1.0.0';
  properties: EventWithArrayTypesProperties;

  constructor(properties: EventWithArrayTypesProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventWithConstTypes
 */
export class EventWithConstTypes implements Event {
  name = 'Event With Const Types';
  id = '321b8f02-1bb3-4b33-8c21-8c55401d62da';
  version = '1.0.0';
  properties: EventWithConstTypesProperties & {
    "String Const WIth Quotes": "\"String \"Const With\" Quotes\"",
    "String Const": "String-Constant",
    "String Int Const": 0,
    "Integer Const": 10,
    "Boolean Const": true,
    "Number Const": 2.2
  };

  constructor(properties: EventWithConstTypesProperties) {
    this.properties = {
      'String Const WIth Quotes': "\"String \"Const With\" Quotes\"",
      'String Const': "String-Constant",
      'String Int Const': 0,
      'Integer Const': 10,
      'Boolean Const': true,
      'Number Const': 2.2,
    };
  }
}
/**
 * Event Class EventWithDifferentCasingTypes
 */
export class EventWithDifferentCasingTypes implements Event {
  name = 'event withDifferent_CasingTypes';
  id = 'fcb3d82d-208f-4bc2-b8e1-843683d9b595';
  version = '1.0.0';
  properties: EventWithDifferentCasingTypesProperties;

  constructor(properties: EventWithDifferentCasingTypesProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventWithEnumTypes
 */
export class EventWithEnumTypes implements Event {
  name = 'Event With Enum Types';
  id = 'b4fc8366-b05d-40d3-b698-79795701624b';
  version = '1.0.0';
  properties: EventWithEnumTypesProperties;

  constructor(properties: EventWithEnumTypesProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventWithOptionalArrayTypes
 */
export class EventWithOptionalArrayTypes implements Event {
  name = 'Event With Optional Array Types';
  id = '2755da0e-a507-4b18-8f17-86d1d5c499ab';
  version = '1.0.0';
  properties: EventWithOptionalArrayTypesProperties;

  constructor(properties: EventWithOptionalArrayTypesProperties) {
    this.properties = properties;
  }
}
/**
 * Event Class EventWithOptionalProperties
 */
export class EventWithOptionalProperties implements Event {
  name = 'Event With Optional Properties';
  id = '00b99136-9d1a-48d8-89d5-25f165ff3ae0';
  version = '1.0.0';
  properties: EventWithOptionalPropertiesProperties;

  constructor(properties: EventWithOptionalPropertiesProperties) {
    this.properties = properties;
  }
}

export class Ampli {
  private amplitude: AmplitudeClient;
  private middlewares: Middleware[] = [];

  constructor(amplitude: AmplitudeClient) {
    this.amplitude = amplitude;
  }

  identify(properties: IdentifyProperties, userId?: string, deviceId?: string, options?: IdentifyOptions, extra?: Extra) {
    this.runMiddleware({
      method: AmpliMethod.Identify, args: { deviceId }, userId, event: new Identify(properties), options, extra
    }, (payload) => {
      if (userId) {
        this.amplitude.setUserId(userId);
      }
      if (deviceId) {
        this.amplitude.setDeviceId(deviceId);
      }
      const ampIdentify = new AmpIdentify();
      // TODO: map Ampli.Identify properties to Amplitude.Identify
      // TODO: add options to Identify
      this.amplitude.identify(ampIdentify)
    });
  }

  /**
   * Track event
   * @param event Event to track
   * @param options ooptiona track options
   * @param userId optional user id
   * @param extra extra data
   */
  track(event: Event, options?: TrackOptions, userId?: string, extra?: Extra) {
    this.runMiddleware({
      method: AmpliMethod.Track, userId, event, options, extra
    }, (payload) => {
      if (userId) {
        this.amplitude.setUserId(userId);
      }
      // Merge in
      const ampEvent = {
        ...(options || {}),
        event_type: payload.event.name,
        user_id: payload.userId,
        event_properties: payload.event.properties,
      };
      return this.amplitude.logEvent(
        ampEvent.event_type,
        ampEvent.event_properties,
        ampEvent.callback,
      );
    });
  }

  /**
   * add a middleware to process
   * @param middleware
   */
  addMiddleware(middleware: Middleware): void {
    this.middlewares.push(middleware);
  }

  /**
   * Run through middleware for payload
   * @param payload
   * @param next
   */
  runMiddleware(payload: Payload, next: (p: Payload) => void): void {
    let mIndex = 0;
    const mCount = this.middlewares.length;
    let curPayload: PayloadInternal = {
      ...payload,
      out: {
        ...payload,
      },
    };

    if (mCount > 0) {
      const _next = () => {
        mIndex += 1;
        const { out } = curPayload;
        curPayload = { ...out, out: { ...out } };
        if (mIndex < mCount) {
          this.middlewares[mIndex](curPayload, _next);
        } else {
          next(out);
        }
      };

      this.middlewares[0](curPayload, _next);
    } else {
      next(curPayload);
    }
  }

  // flush() {
  //   return this.amplitude.sendEvents();
  // }

  // GENERATED EVENT FUNCTIONS
  eventMaxIntForTest( properties: EventMaxIntForTestProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventMaxIntForTest(properties), options, userId, extra);
  }

  eventNoProperties( options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventNoProperties(), options, userId, extra);
  }

  eventObjectTypes( properties: EventObjectTypesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventObjectTypes(properties), options, userId, extra);
  }

  eventWithAllProperties( properties: EventWithAllPropertiesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithAllProperties(properties), options, userId, extra);
  }

  eventWithArrayTypes( properties: EventWithArrayTypesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithArrayTypes(properties), options, userId, extra);
  }

  eventWithConstTypes( properties: EventWithConstTypesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithConstTypes(properties), options, userId, extra);
  }

  eventWithDifferentCasingTypes( properties: EventWithDifferentCasingTypesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithDifferentCasingTypes(properties), options, userId, extra);
  }

  eventWithEnumTypes( properties: EventWithEnumTypesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithEnumTypes(properties), options, userId, extra);
  }

  eventWithOptionalArrayTypes( properties: EventWithOptionalArrayTypesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithOptionalArrayTypes(properties), options, userId, extra);
  }

  eventWithOptionalProperties( properties: EventWithOptionalPropertiesProperties, options?: TrackOptions, userId?: string, extra?: Extra) {
    return this.track(new EventWithOptionalProperties(properties), options, userId, extra);
  }

}

export function getInstance(apiKey: string, instanceName?: string) {
  const instance = instanceName ? instanceName : '';
  const client = amplitude.getInstance(instance);
  client.init(apiKey);
  return new Ampli(client);
}
