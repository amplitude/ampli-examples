/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull obj-c-ampli-v2'
 *
 * Required dependencies: AmplitudeSwift ~> 0.7.1
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: ios:obj-c-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/obj-c-ampli-v2)
 */

#import <Foundation/Foundation.h>
@import AmplitudeSwift;
#import "Ampli.h"

@implementation Event: NSObject

- (instancetype)initWithEventType: (NSString *) eventType eventProperties: (NSDictionary *) eventProperties {
    _eventType = eventType;
    _eventProperties = [self removeNullValues:eventProperties];
    return self;
}

- (instancetype)initWithEventType: (NSString *) eventType eventProperties: (NSDictionary *) eventProperties options:(AMPEventOptions*)options {
    _eventType = eventType;
    _eventProperties = [self removeNullValues:eventProperties];
    _options = options;
    return self;
}

- (NSDictionary *)removeNullValues:(NSDictionary *)dict {
    if (dict == nil) {
        return nil;
    }
    NSMutableDictionary *copy = [dict mutableCopy];
    NSArray *keysForNullValues = [copy allKeysForObject:[NSNull null]];
    [copy removeObjectsForKeys:keysForNullValues];
    return copy;
}

@end

#pragma mark - IdentifyBuilder

@implementation IdentifyBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalArray = nil;
    }
    return self;
}
@end

#pragma mark - Identify

@implementation Identify: Event

+ (instancetype)requiredNumber:(Float64)requiredNumber {
    return [self requiredNumber: requiredNumber
                builderBlock:^(IdentifyBuilder * b) {}];
}
+ (instancetype)requiredNumber:(Float64)requiredNumber builderBlock:(void (^)(IdentifyBuilder *b))builderBlock {
    IdentifyBuilder *options = [IdentifyBuilder new];
    builderBlock(options);
    return [[self alloc] initWithRequiredNumber_Identify: requiredNumber
                optionalArray: options.optionalArray];
}

- (instancetype)initWithRequiredNumber_Identify:(Float64)requiredNumber
optionalArray:(NSArray<NSString *> * _Nullable)optionalArray {
    self = [super initWithEventType:@"$identify"
                    eventProperties:@{
                        @"optionalArray": optionalArray ?: NSNull.null,
                        @"requiredNumber": @(requiredNumber)
                    }];
    return self;
}
@end

#pragma mark - EventNoProperties

@implementation EventNoProperties: Event
- (instancetype)init {
    self = [super initWithEventType:@"Event No Properties"
                    eventProperties:@{}];
    return self;
}
@end

#pragma mark - EventObjectTypes

@implementation EventObjectTypes: Event

+ (instancetype)requiredObject:(NSDictionary<NSString *, NSObject *> *)requiredObject requiredObjectArray:(NSArray<NSDictionary<NSString *, NSObject *> *> *)requiredObjectArray {
    return [[self alloc] initWithRequiredObject_EventObjectTypes: requiredObject
                        requiredObjectArray: requiredObjectArray];
}

- (instancetype)initWithRequiredObject_EventObjectTypes:(NSDictionary<NSString *, NSObject *> *)requiredObject
requiredObjectArray:(NSArray<NSDictionary<NSString *, NSObject *> *> *)requiredObjectArray {
    self = [super initWithEventType:@"Event Object Types"
                    eventProperties:@{
                        @"requiredObject": requiredObject,
                        @"requiredObjectArray": requiredObjectArray
                    }];
    return self;
}
@end

#pragma mark - EventWithAllPropertiesBuilder

@implementation EventWithAllPropertiesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalString = nil;
    }
    return self;
}
@end

#pragma mark - EventWithAllProperties

@implementation EventWithAllProperties: Event

+ (instancetype)requiredArray:(NSArray<NSString *> *)requiredArray requiredBoolean:(Boolean)requiredBoolean requiredEnum:(EventWithAllPropertiesRequiredEnum)requiredEnum requiredInteger:(NSInteger)requiredInteger requiredNumber:(Float64)requiredNumber requiredString:(NSString*)requiredString {
    return [self requiredArray: requiredArray
                requiredBoolean: requiredBoolean
                requiredEnum: requiredEnum
                requiredInteger: requiredInteger
                requiredNumber: requiredNumber
                requiredString: requiredString
                builderBlock:^(EventWithAllPropertiesBuilder * b) {}];
}
+ (instancetype)requiredArray:(NSArray<NSString *> *)requiredArray requiredBoolean:(Boolean)requiredBoolean requiredEnum:(EventWithAllPropertiesRequiredEnum)requiredEnum requiredInteger:(NSInteger)requiredInteger requiredNumber:(Float64)requiredNumber requiredString:(NSString*)requiredString builderBlock:(void (^)(EventWithAllPropertiesBuilder *b))builderBlock {
    EventWithAllPropertiesBuilder *options = [EventWithAllPropertiesBuilder new];
    builderBlock(options);
    return [[self alloc] initWithRequiredArray_EventWithAllProperties: requiredArray
                requiredBoolean: requiredBoolean
                requiredEnum: requiredEnum
                requiredInteger: requiredInteger
                requiredNumber: requiredNumber
                requiredString: requiredString
                optionalString: options.optionalString];
}

- (instancetype)initWithRequiredArray_EventWithAllProperties:(NSArray<NSString *> *)requiredArray
requiredBoolean:(Boolean)requiredBoolean
requiredEnum:(EventWithAllPropertiesRequiredEnum)requiredEnum
requiredInteger:(NSInteger)requiredInteger
requiredNumber:(Float64)requiredNumber
requiredString:(NSString*)requiredString
optionalString:(NSString* _Nullable)optionalString {
    self = [super initWithEventType:@"Event With All Properties"
                    eventProperties:@{
                        @"optionalString": optionalString ?: NSNull.null,
                        @"requiredArray": requiredArray,
                        @"requiredBoolean": [NSNumber numberWithBool:requiredBoolean],
                        @"requiredConst": @"some-const-value",
                        @"requiredEnum": [EventWithAllProperties stringFromRequiredEnum: requiredEnum],
                        @"requiredInteger": @(requiredInteger),
                        @"requiredNumber": @(requiredNumber),
                        @"requiredString": requiredString
                    }];
    return self;
}

+ (NSString * _Nullable)stringFromRequiredEnum:(EventWithAllPropertiesRequiredEnum)enumValue {
    switch (enumValue) {
        case EventWithAllPropertiesRequiredEnumEnum1:
            return @"Enum1";
        case EventWithAllPropertiesRequiredEnumEnum2:
            return @"Enum2";
    }
}
@end

#pragma mark - EventWithArrayTypes

@implementation EventWithArrayTypes: Event

+ (instancetype)requiredBooleanArray:(NSArray<NSNumber *> *)requiredBooleanArray requiredEnumArray:(NSArray<NSString *> *)requiredEnumArray requiredNumberArray:(NSArray<NSNumber *> *)requiredNumberArray requiredObjectArray:(NSArray<NSDictionary<NSString *, NSObject *> *> *)requiredObjectArray requiredStringArray:(NSArray<NSString *> *)requiredStringArray {
    return [[self alloc] initWithRequiredBooleanArray_EventWithArrayTypes: requiredBooleanArray
                        requiredEnumArray: requiredEnumArray
                        requiredNumberArray: requiredNumberArray
                        requiredObjectArray: requiredObjectArray
                        requiredStringArray: requiredStringArray];
}

- (instancetype)initWithRequiredBooleanArray_EventWithArrayTypes:(NSArray<NSNumber *> *)requiredBooleanArray
requiredEnumArray:(NSArray<NSString *> *)requiredEnumArray
requiredNumberArray:(NSArray<NSNumber *> *)requiredNumberArray
requiredObjectArray:(NSArray<NSDictionary<NSString *, NSObject *> *> *)requiredObjectArray
requiredStringArray:(NSArray<NSString *> *)requiredStringArray {
    self = [super initWithEventType:@"Event With Array Types"
                    eventProperties:@{
                        @"requiredBooleanArray": requiredBooleanArray,
                        @"requiredEnumArray": requiredEnumArray,
                        @"requiredNumberArray": requiredNumberArray,
                        @"requiredObjectArray": requiredObjectArray,
                        @"requiredStringArray": requiredStringArray
                    }];
    return self;
}
@end

#pragma mark - EventWithConstTypes

@implementation EventWithConstTypes: Event
- (instancetype)init {
    self = [super initWithEventType:@"Event With Const Types"
                    eventProperties:@{
                        @"Boolean Const": @YES,
                        @"Integer Const": @10,
                        @"Number Const": @2.2,
                        @"String Const": @"String-Constant",
                        @"String Const WIth Quotes": @"\"String \"Const With\" Quotes\"",
                        @"String Int Const": @0
                    }];
    return self;
}
@end

#pragma mark - EventWithEnumTypesBuilder

@implementation EventWithEnumTypesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalEnum = EventWithEnumTypesOptionalEnumUndefined;
    }
    return self;
}
@end

#pragma mark - EventWithEnumTypes

@implementation EventWithEnumTypes: Event

+ (instancetype)requiredEnum:(EventWithEnumTypesRequiredEnum)requiredEnum {
    return [self requiredEnum: requiredEnum
                builderBlock:^(EventWithEnumTypesBuilder * b) {}];
}
+ (instancetype)requiredEnum:(EventWithEnumTypesRequiredEnum)requiredEnum builderBlock:(void (^)(EventWithEnumTypesBuilder *b))builderBlock {
    EventWithEnumTypesBuilder *options = [EventWithEnumTypesBuilder new];
    builderBlock(options);
    return [[self alloc] initWithRequiredEnum_EventWithEnumTypes: requiredEnum
                optionalEnum: options.optionalEnum];
}

- (instancetype)initWithRequiredEnum_EventWithEnumTypes:(EventWithEnumTypesRequiredEnum)requiredEnum
optionalEnum:(EventWithEnumTypesOptionalEnum)optionalEnum {
    self = [super initWithEventType:@"Event With Enum Types"
                    eventProperties:@{
                        @"optional enum": [EventWithEnumTypes stringFromOptionalEnum: optionalEnum] ?: NSNull.null,
                        @"required enum": [EventWithEnumTypes stringFromRequiredEnum: requiredEnum]
                    }];
    return self;
}

+ (NSString * _Nullable)stringFromOptionalEnum:(EventWithEnumTypesOptionalEnum)enumValue {
    switch (enumValue) {
        case EventWithEnumTypesOptionalEnumOptionalEnum1:
            return @"optional enum 1";
        case EventWithEnumTypesOptionalEnumOptionalEnum2:
            return @"optional enum 2";
        case EventWithEnumTypesOptionalEnumUndefined:
            return nil;
    }
}

+ (NSString * _Nullable)stringFromRequiredEnum:(EventWithEnumTypesRequiredEnum)enumValue {
    switch (enumValue) {
        case EventWithEnumTypesRequiredEnumRequiredEnum1:
            return @"required enum 1";
        case EventWithEnumTypesRequiredEnumRequiredEnum2:
            return @"required enum 2";
    }
}
@end

#pragma mark - EventWithOptionalArrayTypesBuilder

@implementation EventWithOptionalArrayTypesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalBooleanArray = nil;
        self.optionalEnumArray = nil;
        self.optionalJsonArray = nil;
        self.optionalNumberArray = nil;
        self.optionalStringArray = nil;
    }
    return self;
}
@end

#pragma mark - EventWithOptionalArrayTypes

@implementation EventWithOptionalArrayTypes: Event

+ (instancetype) builderBlock:(void (^)(EventWithOptionalArrayTypesBuilder *b))builderBlock {
    EventWithOptionalArrayTypesBuilder *options = [EventWithOptionalArrayTypesBuilder new];
    builderBlock(options);
    return [[self alloc] initWithOptionalBooleanArray_EventWithOptionalArrayTypes: options.optionalBooleanArray
                optionalEnumArray: options.optionalEnumArray
                optionalJsonArray: options.optionalJsonArray
                optionalNumberArray: options.optionalNumberArray
                optionalStringArray: options.optionalStringArray];
}

- (instancetype)initWithOptionalBooleanArray_EventWithOptionalArrayTypes:(NSArray<NSNumber *> * _Nullable)optionalBooleanArray
optionalEnumArray:(NSArray<NSString *> * _Nullable)optionalEnumArray
optionalJsonArray:(NSArray<NSDictionary<NSString *, NSObject *> *> * _Nullable)optionalJsonArray
optionalNumberArray:(NSArray<NSNumber *> * _Nullable)optionalNumberArray
optionalStringArray:(NSArray<NSString *> * _Nullable)optionalStringArray {
    self = [super initWithEventType:@"Event With Optional Array Types"
                    eventProperties:@{
                        @"optionalBooleanArray": optionalBooleanArray ?: NSNull.null,
                        @"optionalEnumArray": optionalEnumArray ?: NSNull.null,
                        @"optionalJSONArray": optionalJsonArray ?: NSNull.null,
                        @"optionalNumberArray": optionalNumberArray ?: NSNull.null,
                        @"optionalStringArray": optionalStringArray ?: NSNull.null
                    }];
    return self;
}

- (instancetype)init {
    return [self initWithOptionalBooleanArray_EventWithOptionalArrayTypes:nil
                optionalEnumArray:nil
                optionalJsonArray:nil
                optionalNumberArray:nil
                optionalStringArray:nil];
}
@end

#pragma mark - EventWithOptionalPropertiesBuilder

@implementation EventWithOptionalPropertiesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalArrayNumber = nil;
        self.optionalArrayString = nil;
        self.optionalString = nil;
    }
    return self;
}
@end

#pragma mark - EventWithOptionalProperties

@implementation EventWithOptionalProperties: Event

+ (instancetype) builderBlock:(void (^)(EventWithOptionalPropertiesBuilder *b))builderBlock {
    EventWithOptionalPropertiesBuilder *options = [EventWithOptionalPropertiesBuilder new];
    builderBlock(options);
    return [[self alloc] initWithOptionalArrayNumber_EventWithOptionalProperties: options.optionalArrayNumber
                optionalArrayString: options.optionalArrayString
                optionalBoolean: options.optionalBoolean
                optionalNumber: options.optionalNumber
                optionalString: options.optionalString];
}

- (instancetype)initWithOptionalArrayNumber_EventWithOptionalProperties:(NSArray<NSNumber *> * _Nullable)optionalArrayNumber
optionalArrayString:(NSArray<NSString *> * _Nullable)optionalArrayString
optionalBoolean:(NSNumber * _Nullable)optionalBoolean
optionalNumber:(NSNumber * _Nullable)optionalNumber
optionalString:(NSString* _Nullable)optionalString {
    self = [super initWithEventType:@"Event With Optional Properties"
                    eventProperties:@{
                        @"optionalArrayNumber": optionalArrayNumber ?: NSNull.null,
                        @"optionalArrayString": optionalArrayString ?: NSNull.null,
                        @"optionalBoolean": optionalBoolean ?: NSNull.null,
                        @"optionalNumber": optionalNumber ?: NSNull.null,
                        @"optionalString": optionalString ?: NSNull.null
                    }];
    return self;
}

- (instancetype)init {
    return [self initWithOptionalArrayNumber_EventWithOptionalProperties:nil
                optionalArrayString:nil
                optionalBoolean:nil
                optionalNumber:nil
                optionalString:nil];
}
@end

#pragma mark - EventWithTemplatePropertiesBuilder

@implementation EventWithTemplatePropertiesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {

    }
    return self;
}
@end

#pragma mark - EventWithTemplateProperties

@implementation EventWithTemplateProperties: Event

+ (instancetype)requiredEventProperty:(NSString*)requiredEventProperty requiredTemplateProperty:(NSString*)requiredTemplateProperty {
    return [self requiredEventProperty: requiredEventProperty
                requiredTemplateProperty: requiredTemplateProperty
                builderBlock:^(EventWithTemplatePropertiesBuilder * b) {}];
}
+ (instancetype)requiredEventProperty:(NSString*)requiredEventProperty requiredTemplateProperty:(NSString*)requiredTemplateProperty builderBlock:(void (^)(EventWithTemplatePropertiesBuilder *b))builderBlock {
    EventWithTemplatePropertiesBuilder *options = [EventWithTemplatePropertiesBuilder new];
    builderBlock(options);
    return [[self alloc] initWithRequiredEventProperty_EventWithTemplateProperties: requiredEventProperty
                requiredTemplateProperty: requiredTemplateProperty
                optionalEventProperty: options.optionalEventProperty
                optionalTemplateProperty: options.optionalTemplateProperty];
}

- (instancetype)initWithRequiredEventProperty_EventWithTemplateProperties:(NSString*)requiredEventProperty
requiredTemplateProperty:(NSString*)requiredTemplateProperty
optionalEventProperty:(NSNumber * _Nullable)optionalEventProperty
optionalTemplateProperty:(NSNumber * _Nullable)optionalTemplateProperty {
    self = [super initWithEventType:@"Event With Template Properties"
                    eventProperties:@{
                        @"optional_event_property": optionalEventProperty ?: NSNull.null,
                        @"optional_template_property": optionalTemplateProperty ?: NSNull.null,
                        @"required_event_property": requiredEventProperty,
                        @"required_template_property": requiredTemplateProperty
                    }];
    return self;
}
@end

#pragma mark - EventWithDifferentCasingTypes

@implementation EventWithDifferentCasingTypes: Event

+ (instancetype)enumWithSpace:(EventWithDifferentCasingTypesEnumWithSpace)enumWithSpace enumSnakeCase:(EventWithDifferentCasingTypesEnumSnakeCase)enumSnakeCase enumCamelCase:(EventWithDifferentCasingTypesEnumCamelCase)enumCamelCase enumPascalCase:(EventWithDifferentCasingTypesEnumPascalCase)enumPascalCase propertyWithSpace:(NSString*)propertyWithSpace propertyWithSnakeCase:(NSString*)propertyWithSnakeCase propertyWithCamelCase:(NSString*)propertyWithCamelCase propertyWithPascalCase:(NSString*)propertyWithPascalCase {
    return [[self alloc] initWithEnumWithSpace_EventWithDifferentCasingTypes: enumWithSpace
                        enumSnakeCase: enumSnakeCase
                        enumCamelCase: enumCamelCase
                        enumPascalCase: enumPascalCase
                        propertyWithSpace: propertyWithSpace
                        propertyWithSnakeCase: propertyWithSnakeCase
                        propertyWithCamelCase: propertyWithCamelCase
                        propertyWithPascalCase: propertyWithPascalCase];
}

- (instancetype)initWithEnumWithSpace_EventWithDifferentCasingTypes:(EventWithDifferentCasingTypesEnumWithSpace)enumWithSpace
enumSnakeCase:(EventWithDifferentCasingTypesEnumSnakeCase)enumSnakeCase
enumCamelCase:(EventWithDifferentCasingTypesEnumCamelCase)enumCamelCase
enumPascalCase:(EventWithDifferentCasingTypesEnumPascalCase)enumPascalCase
propertyWithSpace:(NSString*)propertyWithSpace
propertyWithSnakeCase:(NSString*)propertyWithSnakeCase
propertyWithCamelCase:(NSString*)propertyWithCamelCase
propertyWithPascalCase:(NSString*)propertyWithPascalCase {
    self = [super initWithEventType:@"event withDifferent_CasingTypes"
                    eventProperties:@{
                        @"enum with space": [EventWithDifferentCasingTypes stringFromEnumWithSpace: enumWithSpace],
                        @"enum_snake_case": [EventWithDifferentCasingTypes stringFromEnumSnakeCase: enumSnakeCase],
                        @"enumCamelCase": [EventWithDifferentCasingTypes stringFromEnumCamelCase: enumCamelCase],
                        @"EnumPascalCase": [EventWithDifferentCasingTypes stringFromEnumPascalCase: enumPascalCase],
                        @"property with space": propertyWithSpace,
                        @"property_with_snake_case": propertyWithSnakeCase,
                        @"propertyWithCamelCase": propertyWithCamelCase,
                        @"PropertyWithPascalCase": propertyWithPascalCase
                    }];
    return self;
}

+ (NSString * _Nullable)stringFromEnumWithSpace:(EventWithDifferentCasingTypesEnumWithSpace)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumWithSpaceEnumWithSpace:
            return @"enum with space";
    }
}

+ (NSString * _Nullable)stringFromEnumSnakeCase:(EventWithDifferentCasingTypesEnumSnakeCase)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumSnakeCaseEnumSnakeCase:
            return @"enum_snake_case";
    }
}

+ (NSString * _Nullable)stringFromEnumCamelCase:(EventWithDifferentCasingTypesEnumCamelCase)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumCamelCaseEnumCamelCase:
            return @"enumCamelCase";
    }
}

+ (NSString * _Nullable)stringFromEnumPascalCase:(EventWithDifferentCasingTypesEnumPascalCase)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumPascalCaseEnumPascalCase:
            return @"EnumPascalCase";
    }
}
@end

#pragma mark - EventMaxIntForTest

@implementation EventMaxIntForTest: Event

+ (instancetype)intMax10:(NSInteger)intMax10 {
    return [[self alloc] initWithIntMax10_EventMaxIntForTest: intMax10];
}

- (instancetype)initWithIntMax10_EventMaxIntForTest:(NSInteger)intMax10 {
    self = [super initWithEventType:@"EventMaxIntForTest"
                    eventProperties:@{
                        @"intMax10": @(intMax10)
                    }];
    return self;
}
@end

@implementation LoadClientOptions

+ (instancetype) initWithApiKey:(NSString*)apiKey {
    return [[LoadClientOptions alloc] initWithApiKey:apiKey];
}

+ (instancetype) initWithInstance:(Amplitude*)instance {
    return [[LoadClientOptions alloc] initWithInstance:instance];
}

+ (instancetype) initWithConfiguration:(AMPConfiguration*)configuration {
    return [[LoadClientOptions alloc] initWithConfiguration:configuration];
}

- (instancetype) initWithApiKey:(NSString*)apiKey {
    _configuration = [AMPConfiguration initWithApiKey:apiKey];
    return self;
}

- (instancetype) initWithInstance:(Amplitude*)instance {
    _instance = instance;
    return self;
}

- (instancetype) initWithConfiguration:(AMPConfiguration*)configuration {
    _configuration = configuration;
    return self;
}

@end

@implementation LoadOptions

+ (instancetype) initWithApiKey:(NSString*)apiKey {
    LoadClientOptions* client = [LoadClientOptions initWithApiKey:apiKey];
    return [[LoadOptions alloc] initWithClientOptions:client];
}

+ (instancetype) initWithEnvironment:(AmpliEnvironment)environment {
    return [[LoadOptions alloc] initWithEnvironment:environment];
}

+ (instancetype) initWithClientOptions:(LoadClientOptions*)client {
    return [[LoadOptions alloc] initWithClientOptions:client];
}

+ (instancetype) initWithDisabled:(BOOL)disabled {
    return [[LoadOptions alloc] initWithDisabled:disabled];
}

- (instancetype) initWithClientOptions:(LoadClientOptions*)client {
    _client = client;
    return self;
}

- (instancetype) initWithEnvironment:(AmpliEnvironment)environment {
    _environment = environment;
    return self;
}

- (instancetype) initWithDisabled:(BOOL)disabled {
    _disabled = disabled;
    return self;
}

@end

@implementation Ampli

+ (instancetype)instance {
    static Ampli* ampli = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        ampli = [[self alloc] init];
    });
    return ampli;
}

- (instancetype)init {
    self = [super init];
    if (self) {
        _disabled = NO;
    }
    return self;
}

- (void)load {
    [self load:nil];
}

/**
 * options should have 'environment', 'client.api_key' or 'client.instance'
 */
- (void)load:(LoadOptions*)options {
    NSDictionary* ApiKey = @{
        @(prod): @"",
        @(dev): @""
    };
    self.disabled = options.disabled;
    if (self.isLoaded) {
        NSLog(@"Warning: Ampli is already initialized. Ampli.instance.load() should be called once at application start up.");
        return;
    }

    AmpliEnvironment env = options.environment;
    NSString* apiKey = options.client != nil && options.client.configuration != nil && options.client.configuration.apiKey != nil
        ? options.client.configuration.apiKey
        : ApiKey[@(env)];

    if (options.client != nil && options.client.instance != nil) {
        _client = options.client.instance;
    } else if (apiKey != nil) {
        AMPConfiguration* configuration = options.client != nil ? options.client.configuration : nil;
        if (configuration == nil) {
            configuration = [AMPConfiguration initWithApiKey:apiKey];
        }
        _client = [Amplitude initWithConfiguration:configuration];
    } else {
        NSLog(@"ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
        return;
    }

    if (_client != nil) {
        _isLoaded = YES;

        if (_client.configuration.plan == nil) {
            AMPPlan* plan = [AMPPlan new];
            plan.branch = @"main";
            plan.source = @"obj-c-ampli-v2";
            plan.version = @"1";
            plan.versionId = @"a61c3908-ca4d-4c8d-8f81-54ad3ba17b9c";
            _client.configuration.plan = plan;
        }

         if (_client.configuration.ingestionMetadata == nil) {
            AMPIngestionMetadata* ingestionMetadata = [AMPIngestionMetadata new];
            ingestionMetadata.sourceName = @"ios-objective-c-ampli-v2";
            ingestionMetadata.sourceVersion = @"1.0.0";
            _client.configuration.ingestionMetadata = ingestionMetadata;
        }
    }
}

- (void)track:(Event*)event {
    [self track:event options:nil];
}

- (void)track:(Event*)event options:(AMPEventOptions* _Nullable)options {
    if (![self isInitializedAndEnabled]) {
        return;
    }
    AMPEventOptions* eventOptions = [self getEventOptions:event.options overrideOptions:options overrideUserId:nil];
    [self.client track:event.eventType eventProperties:event.eventProperties options:eventOptions];
}

- (void)identify:(NSString* _Nullable)userId event:(Identify*)event {
    [self identify:userId event:event options:nil];
}

- (void)identify:(NSString* _Nullable)userId event:(Identify*)event options:(AMPEventOptions* _Nullable)options {
    if (![self isInitializedAndEnabled]) {
        return;
    }

    AMPIdentify* identify = [AMPIdentify new];
    if (event.eventProperties != nil) {
        [event.eventProperties enumerateKeysAndObjectsUsingBlock:^(id key, id value, BOOL* stop) {
          [identify set:key value:value];
        }];
    }
    AMPEventOptions* eventOptions = [self getEventOptions:event.options overrideOptions:options overrideUserId:userId];
    [self.client identify:identify options:eventOptions];
 }

- (void)flush {
    if (![self isInitializedAndEnabled]) {
        return;
    }
    if (self.client != nil) {
        [self.client flush];
    }
}

- (void)eventNoProperties:(AMPEventOptions *_Nullable)options {
    [self track:[EventNoProperties new] options:options];
}

- (void)eventNoProperties {
    [self track:[EventNoProperties new]];
}

- (void)eventObjectTypes:(EventObjectTypes *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventObjectTypes:(EventObjectTypes *)event {
    [self track:event];
}

- (void)eventWithAllProperties:(EventWithAllProperties *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithAllProperties:(EventWithAllProperties *)event {
    [self track:event];
}

- (void)eventWithArrayTypes:(EventWithArrayTypes *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithArrayTypes:(EventWithArrayTypes *)event {
    [self track:event];
}

- (void)eventWithConstTypes:(AMPEventOptions *_Nullable)options {
    [self track:[EventWithConstTypes new] options:options];
}

- (void)eventWithConstTypes {
    [self track:[EventWithConstTypes new]];
}

- (void)eventWithEnumTypes:(EventWithEnumTypes *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithEnumTypes:(EventWithEnumTypes *)event {
    [self track:event];
}

- (void)eventWithOptionalArrayTypes:(EventWithOptionalArrayTypes *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithOptionalArrayTypes:(EventWithOptionalArrayTypes *)event {
    [self track:event];
}

- (void)eventWithOptionalProperties:(EventWithOptionalProperties *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithOptionalProperties:(EventWithOptionalProperties *)event {
    [self track:event];
}

- (void)eventWithTemplateProperties:(EventWithTemplateProperties *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithTemplateProperties:(EventWithTemplateProperties *)event {
    [self track:event];
}

- (void)eventWithDifferentCasingTypes:(EventWithDifferentCasingTypes *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventWithDifferentCasingTypes:(EventWithDifferentCasingTypes *)event {
    [self track:event];
}

- (void)eventMaxIntForTest:(EventMaxIntForTest *)event options:(AMPEventOptions *_Nullable)options {
    [self track:event options:options];
}

- (void)eventMaxIntForTest:(EventMaxIntForTest *)event {
    [self track:event];
}

- (BOOL)isInitializedAndEnabled {
    if (!self.isLoaded) {
        NSLog(@"Ampli is not yet initialized. Have you called 'ampli.load()' on app start?");
       return NO;
    }
    return !self.disabled;
}

- (AMPEventOptions*) getEventOptions:(AMPEventOptions*)options overrideOptions:(AMPEventOptions*)overrideOptions overrideUserId:(NSString*)overrideUserId {
    AMPEventOptions* eventOptions = [AMPEventOptions new];
    if (options != nil) {
        [eventOptions mergeEventOptions:options];
    }
    if (overrideOptions != nil) {
        [eventOptions mergeEventOptions:overrideOptions];
    }
    if (overrideUserId != nil) {
        eventOptions.userId = overrideUserId;
    }
    return eventOptions;
}

@end
