/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull obj-c-ampli-v2'
 *
 * Required dependencies: AmplitudeSwift ~> 0.7.1
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: ios:obj-c-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/obj-c-ampli-v2)
 */

#import <Foundation/Foundation.h>
@import AmplitudeSwift;
#import "Ampli.h"

NSDictionary* removeNullValues(NSDictionary* dict) {
    if (dict == nil) {
        return nil;
    }
    NSMutableDictionary *copy = [dict mutableCopy];
    NSArray *keysForNullValues = [copy allKeysForObject:[NSNull null]];
    [copy removeObjectsForKeys:keysForNullValues];
    return copy;
}

#pragma mark - IdentifyBuilder

@implementation IdentifyBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalArray = nil;
    }
    return self;
}
@end

#pragma mark - Identify

@implementation Identify

+ (AMPIdentify*)requiredNumber:(Float64)requiredNumber {
    return [self requiredNumber: requiredNumber
                builderBlock:^(IdentifyBuilder * b) {}];
}
+ (AMPIdentify*)requiredNumber:(Float64)requiredNumber builderBlock:(void (^)(IdentifyBuilder *b))builderBlock {
    IdentifyBuilder *options = [IdentifyBuilder new];
    builderBlock(options);
    
    NSDictionary* userProperties = removeNullValues(@{
        @"optionalArray": options.optionalArray ?: NSNull.null,
        @"requiredNumber": @(requiredNumber)
    });
    
    AMPIdentify* identify = [AMPIdentify new];
    for (NSString* property in userProperties) {
        [identify set:property value:[userProperties objectForKey:property]];
    }
    return identify;
}

@end

#pragma mark - EventNoProperties

@implementation EventNoProperties
+ (AMPBaseEvent*)build {
    return [AMPBaseEvent initWithEventType:@"Event No Properties" eventProperties:removeNullValues(@{})];
}
@end

#pragma mark - EventObjectTypes

@implementation EventObjectTypes

+ (AMPBaseEvent*)requiredObject:(NSDictionary<NSString *, NSObject *> *)requiredObject requiredObjectArray:(NSArray<NSDictionary<NSString *, NSObject *> *> *)requiredObjectArray {
    return [AMPBaseEvent initWithEventType:@"Event Object Types" eventProperties:removeNullValues(@{
        @"requiredObject": requiredObject,
        @"requiredObjectArray": requiredObjectArray
    })];
}

@end

#pragma mark - EventWithAllPropertiesBuilder

@implementation EventWithAllPropertiesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalString = nil;
    }
    return self;
}
@end

#pragma mark - EventWithAllProperties

@implementation EventWithAllProperties

+ (AMPBaseEvent*)requiredArray:(NSArray<NSString *> *)requiredArray requiredBoolean:(Boolean)requiredBoolean requiredEnum:(EventWithAllPropertiesRequiredEnum)requiredEnum requiredInteger:(NSInteger)requiredInteger requiredNumber:(Float64)requiredNumber requiredString:(NSString*)requiredString {
    return [self requiredArray: requiredArray
                requiredBoolean: requiredBoolean
                requiredEnum: requiredEnum
                requiredInteger: requiredInteger
                requiredNumber: requiredNumber
                requiredString: requiredString
                builderBlock:^(EventWithAllPropertiesBuilder * b) {}];
}
+ (AMPBaseEvent*)requiredArray:(NSArray<NSString *> *)requiredArray requiredBoolean:(Boolean)requiredBoolean requiredEnum:(EventWithAllPropertiesRequiredEnum)requiredEnum requiredInteger:(NSInteger)requiredInteger requiredNumber:(Float64)requiredNumber requiredString:(NSString*)requiredString builderBlock:(void (^)(EventWithAllPropertiesBuilder *b))builderBlock {
    EventWithAllPropertiesBuilder *options = [EventWithAllPropertiesBuilder new];
    builderBlock(options);
    return [AMPBaseEvent initWithEventType:@"Event With All Properties" eventProperties:removeNullValues(@{
        @"optionalString": options.optionalString ?: NSNull.null,
        @"requiredArray": requiredArray,
        @"requiredBoolean": [NSNumber numberWithBool:requiredBoolean],
        @"requiredConst": @"some-const-value",
        @"requiredEnum": [EventWithAllProperties stringFromRequiredEnum: requiredEnum],
        @"requiredInteger": @(requiredInteger),
        @"requiredNumber": @(requiredNumber),
        @"requiredString": requiredString
    })];
}

+ (NSString * _Nullable)stringFromRequiredEnum:(EventWithAllPropertiesRequiredEnum)enumValue {
    switch (enumValue) {
        case EventWithAllPropertiesRequiredEnumEnum1:
            return @"Enum1";
        case EventWithAllPropertiesRequiredEnumEnum2:
            return @"Enum2";
    }
}
@end

#pragma mark - EventWithArrayTypes

@implementation EventWithArrayTypes

+ (AMPBaseEvent*)requiredBooleanArray:(NSArray<NSNumber *> *)requiredBooleanArray requiredEnumArray:(NSArray<NSString *> *)requiredEnumArray requiredNumberArray:(NSArray<NSNumber *> *)requiredNumberArray requiredObjectArray:(NSArray<NSDictionary<NSString *, NSObject *> *> *)requiredObjectArray requiredStringArray:(NSArray<NSString *> *)requiredStringArray {
    return [AMPBaseEvent initWithEventType:@"Event With Array Types" eventProperties:removeNullValues(@{
        @"requiredBooleanArray": requiredBooleanArray,
        @"requiredEnumArray": requiredEnumArray,
        @"requiredNumberArray": requiredNumberArray,
        @"requiredObjectArray": requiredObjectArray,
        @"requiredStringArray": requiredStringArray
    })];
}

@end

#pragma mark - EventWithConstTypes

@implementation EventWithConstTypes
+ (AMPBaseEvent*)build {
    return [AMPBaseEvent initWithEventType:@"Event With Const Types" eventProperties:removeNullValues(@{
        @"Boolean Const": @YES,
        @"Integer Const": @10,
        @"Number Const": @2.2,
        @"String Const": @"String-Constant",
        @"String Const WIth Quotes": @"\"String \"Const With\" Quotes\"",
        @"String Int Const": @0
    })];
}
@end

#pragma mark - EventWithEnumTypesBuilder

@implementation EventWithEnumTypesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalEnum = EventWithEnumTypesOptionalEnumUndefined;
    }
    return self;
}
@end

#pragma mark - EventWithEnumTypes

@implementation EventWithEnumTypes

+ (AMPBaseEvent*)requiredEnum:(EventWithEnumTypesRequiredEnum)requiredEnum {
    return [self requiredEnum: requiredEnum
                builderBlock:^(EventWithEnumTypesBuilder * b) {}];
}
+ (AMPBaseEvent*)requiredEnum:(EventWithEnumTypesRequiredEnum)requiredEnum builderBlock:(void (^)(EventWithEnumTypesBuilder *b))builderBlock {
    EventWithEnumTypesBuilder *options = [EventWithEnumTypesBuilder new];
    builderBlock(options);
    return [AMPBaseEvent initWithEventType:@"Event With Enum Types" eventProperties:removeNullValues(@{
        @"optional enum": [EventWithEnumTypes stringFromOptionalEnum: options.optionalEnum] ?: NSNull.null,
        @"required enum": [EventWithEnumTypes stringFromRequiredEnum: requiredEnum]
    })];
}

+ (NSString * _Nullable)stringFromOptionalEnum:(EventWithEnumTypesOptionalEnum)enumValue {
    switch (enumValue) {
        case EventWithEnumTypesOptionalEnumOptionalEnum1:
            return @"optional enum 1";
        case EventWithEnumTypesOptionalEnumOptionalEnum2:
            return @"optional enum 2";
        case EventWithEnumTypesOptionalEnumUndefined:
            return nil;
    }
}

+ (NSString * _Nullable)stringFromRequiredEnum:(EventWithEnumTypesRequiredEnum)enumValue {
    switch (enumValue) {
        case EventWithEnumTypesRequiredEnumRequiredEnum1:
            return @"required enum 1";
        case EventWithEnumTypesRequiredEnumRequiredEnum2:
            return @"required enum 2";
    }
}
@end

#pragma mark - EventWithOptionalArrayTypesBuilder

@implementation EventWithOptionalArrayTypesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalBooleanArray = nil;
        self.optionalEnumArray = nil;
        self.optionalJsonArray = nil;
        self.optionalNumberArray = nil;
        self.optionalStringArray = nil;
    }
    return self;
}
@end

#pragma mark - EventWithOptionalArrayTypes

@implementation EventWithOptionalArrayTypes

+ (AMPBaseEvent*) build {
    return [self builderBlock:^(EventWithOptionalArrayTypesBuilder * b) {}];
}

+ (AMPBaseEvent*) builderBlock:(void (^)(EventWithOptionalArrayTypesBuilder *b))builderBlock {
    EventWithOptionalArrayTypesBuilder *options = [EventWithOptionalArrayTypesBuilder new];
    builderBlock(options);
    return [AMPBaseEvent initWithEventType:@"Event With Optional Array Types" eventProperties:removeNullValues(@{
        @"optionalBooleanArray": options.optionalBooleanArray ?: NSNull.null,
        @"optionalEnumArray": options.optionalEnumArray ?: NSNull.null,
        @"optionalJSONArray": options.optionalJsonArray ?: NSNull.null,
        @"optionalNumberArray": options.optionalNumberArray ?: NSNull.null,
        @"optionalStringArray": options.optionalStringArray ?: NSNull.null
    })];
}

@end

#pragma mark - EventWithOptionalPropertiesBuilder

@implementation EventWithOptionalPropertiesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {
        self.optionalArrayNumber = nil;
        self.optionalArrayString = nil;
        self.optionalString = nil;
    }
    return self;
}
@end

#pragma mark - EventWithOptionalProperties

@implementation EventWithOptionalProperties

+ (AMPBaseEvent*) build {
    return [self builderBlock:^(EventWithOptionalPropertiesBuilder * b) {}];
}

+ (AMPBaseEvent*) builderBlock:(void (^)(EventWithOptionalPropertiesBuilder *b))builderBlock {
    EventWithOptionalPropertiesBuilder *options = [EventWithOptionalPropertiesBuilder new];
    builderBlock(options);
    return [AMPBaseEvent initWithEventType:@"Event With Optional Properties" eventProperties:removeNullValues(@{
        @"optionalArrayNumber": options.optionalArrayNumber ?: NSNull.null,
        @"optionalArrayString": options.optionalArrayString ?: NSNull.null,
        @"optionalBoolean": options.optionalBoolean ?: NSNull.null,
        @"optionalNumber": options.optionalNumber ?: NSNull.null,
        @"optionalString": options.optionalString ?: NSNull.null
    })];
}

@end

#pragma mark - EventWithTemplatePropertiesBuilder

@implementation EventWithTemplatePropertiesBuilder: NSObject
-(instancetype)init {
    if (self = [super init]) {

    }
    return self;
}
@end

#pragma mark - EventWithTemplateProperties

@implementation EventWithTemplateProperties

+ (AMPBaseEvent*)requiredEventProperty:(NSString*)requiredEventProperty requiredTemplateProperty:(NSString*)requiredTemplateProperty {
    return [self requiredEventProperty: requiredEventProperty
              requiredTemplateProperty: requiredTemplateProperty
                          builderBlock:^(EventWithTemplatePropertiesBuilder * b) {}];
}
+ (AMPBaseEvent*)requiredEventProperty:(NSString*)requiredEventProperty requiredTemplateProperty:(NSString*)requiredTemplateProperty builderBlock:(void (^)(EventWithTemplatePropertiesBuilder *b))builderBlock {
    EventWithTemplatePropertiesBuilder *options = [EventWithTemplatePropertiesBuilder new];
    builderBlock(options);
    return [AMPBaseEvent initWithEventType:@"Event With Template Properties" eventProperties:removeNullValues(@{
        @"optional_event_property": options.optionalEventProperty ?: NSNull.null,
        @"optional_template_property": options.optionalTemplateProperty ?: NSNull.null,
        @"required_event_property": requiredEventProperty,
        @"required_template_property": requiredTemplateProperty
    })];
}

@end

#pragma mark - EventWithDifferentCasingTypes

@implementation EventWithDifferentCasingTypes

+ (AMPBaseEvent*)enumWithSpace:(EventWithDifferentCasingTypesEnumWithSpace)enumWithSpace enumSnakeCase:(EventWithDifferentCasingTypesEnumSnakeCase)enumSnakeCase enumCamelCase:(EventWithDifferentCasingTypesEnumCamelCase)enumCamelCase enumPascalCase:(EventWithDifferentCasingTypesEnumPascalCase)enumPascalCase propertyWithSpace:(NSString*)propertyWithSpace propertyWithSnakeCase:(NSString*)propertyWithSnakeCase propertyWithCamelCase:(NSString*)propertyWithCamelCase propertyWithPascalCase:(NSString*)propertyWithPascalCase {
    return [AMPBaseEvent initWithEventType:@"event withDifferent_CasingTypes" eventProperties:removeNullValues(@{
        @"enum with space": [EventWithDifferentCasingTypes stringFromEnumWithSpace: enumWithSpace],
        @"enum_snake_case": [EventWithDifferentCasingTypes stringFromEnumSnakeCase: enumSnakeCase],
        @"enumCamelCase": [EventWithDifferentCasingTypes stringFromEnumCamelCase: enumCamelCase],
        @"EnumPascalCase": [EventWithDifferentCasingTypes stringFromEnumPascalCase: enumPascalCase],
        @"property with space": propertyWithSpace,
        @"property_with_snake_case": propertyWithSnakeCase,
        @"propertyWithCamelCase": propertyWithCamelCase,
        @"PropertyWithPascalCase": propertyWithPascalCase
    })];
}

+ (NSString * _Nullable)stringFromEnumWithSpace:(EventWithDifferentCasingTypesEnumWithSpace)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumWithSpaceEnumWithSpace:
            return @"enum with space";
    }
}

+ (NSString * _Nullable)stringFromEnumSnakeCase:(EventWithDifferentCasingTypesEnumSnakeCase)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumSnakeCaseEnumSnakeCase:
            return @"enum_snake_case";
    }
}

+ (NSString * _Nullable)stringFromEnumCamelCase:(EventWithDifferentCasingTypesEnumCamelCase)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumCamelCaseEnumCamelCase:
            return @"enumCamelCase";
    }
}

+ (NSString * _Nullable)stringFromEnumPascalCase:(EventWithDifferentCasingTypesEnumPascalCase)enumValue {
    switch (enumValue) {
        case EventWithDifferentCasingTypesEnumPascalCaseEnumPascalCase:
            return @"EnumPascalCase";
    }
}
@end

#pragma mark - EventMaxIntForTest

@implementation EventMaxIntForTest

+ (AMPBaseEvent*)intMax10:(NSInteger)intMax10 {
    return [AMPBaseEvent initWithEventType:@"EventMaxIntForTest" eventProperties:removeNullValues(@{
        @"intMax10": @(intMax10)
    })];
}

@end

@implementation LoadClientOptions

+ (instancetype) initWithApiKey:(NSString*)apiKey {
    return [[LoadClientOptions alloc] initWithApiKey:apiKey];
}

+ (instancetype) initWithInstance:(Amplitude*)instance {
    return [[LoadClientOptions alloc] initWithInstance:instance];
}

+ (instancetype) initWithConfiguration:(AMPConfiguration*)configuration {
    return [[LoadClientOptions alloc] initWithConfiguration:configuration];
}

- (instancetype) initWithApiKey:(NSString*)apiKey {
    _configuration = [AMPConfiguration initWithApiKey:apiKey];
    return self;
}

- (instancetype) initWithInstance:(Amplitude*)instance {
    _instance = instance;
    return self;
}

- (instancetype) initWithConfiguration:(AMPConfiguration*)configuration {
    _configuration = configuration;
    return self;
}

@end

@implementation LoadOptions

+ (instancetype) initWithApiKey:(NSString*)apiKey {
    LoadClientOptions* client = [LoadClientOptions initWithApiKey:apiKey];
    return [[LoadOptions alloc] initWithClientOptions:client];
}

+ (instancetype) initWithEnvironment:(AmpliEnvironment)environment {
    return [[LoadOptions alloc] initWithEnvironment:environment];
}

+ (instancetype) initWithClientOptions:(LoadClientOptions*)client {
    return [[LoadOptions alloc] initWithClientOptions:client];
}

+ (instancetype) initWithDisabled:(BOOL)disabled {
    return [[LoadOptions alloc] initWithDisabled:disabled];
}

- (instancetype) initWithClientOptions:(LoadClientOptions*)client {
    _client = client;
    return self;
}

- (instancetype) initWithEnvironment:(AmpliEnvironment)environment {
    _environment = environment;
    return self;
}

- (instancetype) initWithDisabled:(BOOL)disabled {
    _disabled = disabled;
    return self;
}

@end

@implementation Ampli

+ (instancetype)instance {
    static Ampli* ampli = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        ampli = [[self alloc] init];
    });
    return ampli;
}

- (instancetype)init {
    self = [super init];
    if (self) {
        _disabled = NO;
    }
    return self;
}

- (void)load {
    [self load:nil];
}

/**
 * options should have 'environment', 'client.api_key' or 'client.instance'
 */
- (void)load:(LoadOptions*)options {
    NSDictionary* ApiKey = @{
        @(prod): @"",
        @(dev): @""
    };
    self.disabled = options.disabled;
    if (self.isLoaded) {
        NSLog(@"Warning: Ampli is already initialized. Ampli.instance.load() should be called once at application start up.");
        return;
    }

    AmpliEnvironment env = options.environment;
    NSString* apiKey = options.client != nil && options.client.configuration != nil && options.client.configuration.apiKey != nil
        ? options.client.configuration.apiKey
        : ApiKey[@(env)];

    if (options.client != nil && options.client.instance != nil) {
        _client = options.client.instance;
    } else if (apiKey != nil) {
        AMPConfiguration* configuration = options.client != nil ? options.client.configuration : nil;
        if (configuration == nil) {
            configuration = [AMPConfiguration initWithApiKey:apiKey];
        }
        _client = [Amplitude initWithConfiguration:configuration];
    } else {
        NSLog(@"ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
        return;
    }

    if (_client != nil) {
        _isLoaded = YES;

        if (_client.configuration.plan == nil) {
            AMPPlan* plan = [AMPPlan new];
            plan.branch = @"main";
            plan.source = @"obj-c-ampli-v2";
            plan.version = @"1";
            plan.versionId = @"a61c3908-ca4d-4c8d-8f81-54ad3ba17b9c";
            _client.configuration.plan = plan;
        }

         if (_client.configuration.ingestionMetadata == nil) {
            AMPIngestionMetadata* ingestionMetadata = [AMPIngestionMetadata new];
            ingestionMetadata.sourceName = @"ios-objective-c-ampli-v2";
            ingestionMetadata.sourceVersion = @"1.0.0";
            _client.configuration.ingestionMetadata = ingestionMetadata;
        }
    }
}

- (void)track:(AMPBaseEvent*)event {
    [self track:event options:nil];
}

- (void)track:(AMPBaseEvent*)event options:(AMPEventOptions* _Nullable)options {
    if (![self isInitializedAndEnabled]) {
        return;
    }
    [self.client track:event options:options];
}

- (void)identify:(NSString* _Nullable)userId identify:(AMPIdentify*)identify {
    [self identify:userId identify:identify options:nil];
}

- (void)identify:(NSString* _Nullable)userId identify:(AMPIdentify*)identify options:(AMPEventOptions* _Nullable)options {
    if (![self isInitializedAndEnabled]) {
        return;
    }

    AMPEventOptions* eventOptions = options;
    if (userId != nil) {
        eventOptions = [AMPEventOptions new];
        if (options != nil) {
            [eventOptions mergeEventOptions:options];
        }
        eventOptions.userId = userId;
    }

    [self.client identify:identify options:eventOptions];
 }

- (void)flush {
    if (![self isInitializedAndEnabled]) {
        return;
    }
    if (self.client != nil) {
        [self.client flush];
    }
}

- (BOOL)isInitializedAndEnabled {
    if (!self.isLoaded) {
        NSLog(@"Ampli is not yet initialized. Have you called 'ampli.load()' on app start?");
       return NO;
    }
    return !self.disabled;
}

- (AMPEventOptions*) getEventOptions:(AMPEventOptions*)options overrideOptions:(AMPEventOptions*)overrideOptions overrideUserId:(NSString*)overrideUserId {
    AMPEventOptions* eventOptions = [AMPEventOptions new];
    if (options != nil) {
        [eventOptions mergeEventOptions:options];
    }
    if (overrideOptions != nil) {
        [eventOptions mergeEventOptions:overrideOptions];
    }
    if (overrideUserId != nil) {
        eventOptions.userId = overrideUserId;
    }
    return eventOptions;
}

@end
