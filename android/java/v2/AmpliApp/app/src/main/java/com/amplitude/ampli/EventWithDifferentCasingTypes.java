//
// Ampli - A strong typed wrapper for your Analytics
//
// This file is generated by Amplitude.
// To update run 'ampli pull java-ampli-v2'
//
// Required dependencies: com.amplitude:analytics-android:1.0.0
// Tracking Plan Version: 0
// Build: 1.0.0
// Runtime: android:java-ampli-v2
//
// [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
//
// [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/java-ampli-v2)
//
package com.amplitude.ampli;

import java.util.HashMap;
import com.amplitude.android.events.BaseEvent;

public class EventWithDifferentCasingTypes extends BaseEvent {
    public enum EnumCamelCase {
        ENUMCAMELCASE("enumCamelCase");

        private final String value;

        public String getValue()
        {
            return this.value;
        }

        EnumCamelCase(String value)
        {
            this.value = value;
        }
    }

    public enum EnumPascalCase {
        ENUMPASCALCASE("EnumPascalCase");

        private final String value;

        public String getValue()
        {
            return this.value;
        }

        EnumPascalCase(String value)
        {
            this.value = value;
        }
    }

    public enum EnumSnakeCase {
        ENUM_SNAKE_CASE("enum_snake_case");

        private final String value;

        public String getValue()
        {
            return this.value;
        }

        EnumSnakeCase(String value)
        {
            this.value = value;
        }
    }

    public enum EnumWithSpace {
        ENUM_WITH_SPACE("enum with space");

        private final String value;

        public String getValue()
        {
            return this.value;
        }

        EnumWithSpace(String value)
        {
            this.value = value;
        }
    }

    private EventWithDifferentCasingTypes(Builder builder) {
        eventType = "event withDifferent_CasingTypes";
        setEventProperties(builder.properties);
    }

    public static IEnumCamelCase builder() { return new Builder(); }

    // Inner Builder class with required properties
    public static class Builder implements IEnumCamelCase, IEnumPascalCase, IEnumSnakeCase, IEnumWithSpace, IPropertyWithCamelCase, IPropertyWithPascalCase, IPropertyWithSnakeCase, IPropertyWithSpace, IBuild {
        private final HashMap<String, Object> properties = new HashMap<>();

        private Builder() {

        }

        /**
         * descriptionForEnumCamelCase
         * <p>
         * Must be followed by {@link IEnumPascalCase#enumPascalCase(EnumPascalCase)
         */
        public IEnumPascalCase enumCamelCase(EnumCamelCase enumCamelCase) {
            this.properties.put("enumCamelCase", enumCamelCase.getValue());
            return this;
        }

        /**
         * DescirptionForEnumPascalCase
         * <p>
         * Must be followed by {@link IEnumSnakeCase#enumSnakeCase(EnumSnakeCase)
         */
        public IEnumSnakeCase enumPascalCase(EnumPascalCase enumPascalCase) {
            this.properties.put("EnumPascalCase", enumPascalCase.getValue());
            return this;
        }

        /**
         * description_for_enum_snake_case
         * <p>
         * Must be followed by {@link IEnumWithSpace#enumWithSpace(EnumWithSpace)
         */
        public IEnumWithSpace enumSnakeCase(EnumSnakeCase enumSnakeCase) {
            this.properties.put("enum_snake_case", enumSnakeCase.getValue());
            return this;
        }

        /**
         * Description for enum with space
         * <p>
         * Must be followed by {@link IPropertyWithCamelCase#propertyWithCamelCase(String)
         */
        public IPropertyWithCamelCase enumWithSpace(EnumWithSpace enumWithSpace) {
            this.properties.put("enum with space", enumWithSpace.getValue());
            return this;
        }

        /**
         * descriptionForCamelCase
         * <p>
         * Must be followed by {@link IPropertyWithPascalCase#propertyWithPascalCase(String)
         */
        public IPropertyWithPascalCase propertyWithCamelCase(String propertyWithCamelCase) {
            this.properties.put("propertyWithCamelCase", propertyWithCamelCase);
            return this;
        }

        /**
         * DescriptionForPascalCase
         * <p>
         * Must be followed by {@link IPropertyWithSnakeCase#propertyWithSnakeCase(String)
         */
        public IPropertyWithSnakeCase propertyWithPascalCase(String propertyWithPascalCase) {
            this.properties.put("PropertyWithPascalCase", propertyWithPascalCase);
            return this;
        }

        /**
         * Description_for_snake_case
         * <p>
         * Must be followed by {@link IPropertyWithSpace#propertyWithSpace(String)
         */
        public IPropertyWithSpace propertyWithSnakeCase(String propertyWithSnakeCase) {
            this.properties.put("property_with_snake_case", propertyWithSnakeCase);
            return this;
        }

        /**
         * Description for case with space
         * <p>
         * Must be followed by by additional optional properties or build() method
         */
        public IBuild propertyWithSpace(String propertyWithSpace) {
            this.properties.put("property with space", propertyWithSpace);
            return this;
        }

        public EventWithDifferentCasingTypes build() {
            return new EventWithDifferentCasingTypes(this);
        }
    }

    // Required property interfaces
    public interface IEnumCamelCase {
        IEnumPascalCase enumCamelCase(EnumCamelCase enumCamelCase);
    }

    public interface IEnumPascalCase {
        IEnumSnakeCase enumPascalCase(EnumPascalCase enumPascalCase);
    }

    public interface IEnumSnakeCase {
        IEnumWithSpace enumSnakeCase(EnumSnakeCase enumSnakeCase);
    }

    public interface IEnumWithSpace {
        IPropertyWithCamelCase enumWithSpace(EnumWithSpace enumWithSpace);
    }

    public interface IPropertyWithCamelCase {
        IPropertyWithPascalCase propertyWithCamelCase(String propertyWithCamelCase);
    }

    public interface IPropertyWithPascalCase {
        IPropertyWithSnakeCase propertyWithPascalCase(String propertyWithPascalCase);
    }

    public interface IPropertyWithSnakeCase {
        IPropertyWithSpace propertyWithSnakeCase(String propertyWithSnakeCase);
    }

    public interface IPropertyWithSpace {
        IBuild propertyWithSpace(String propertyWithSpace);
    }

    /** Build interface with optional properties */
    public interface IBuild {
        EventWithDifferentCasingTypes build();
    }
}
