/**
 * Ampli - A strong typed wrapper for your Analytics
 * 
 * This file is generated by Amplitude.
 * To update run 'ampli pull node-ts-ampli'
 * 
 * Required dependencies: @amplitude/node@^1.8.2
 * Tracking Plan Version: 0.0.0
 * Build: 1.0.0
 *
 * Tracking Plan:
 * https://analytics.amplitude.com/amplitude/govern/events/main/latest
 *
 * Full setup Instuctions:
 * https://analytics.amplitude.com/amplitude/govern/implementation/node-ts-ampli
 */

import { Identify as AmplitudeIdentify } from '@amplitude/identify';
import {init as initNodeClient, NodeClient } from '@amplitude/node';
import { BaseEvent, Event, Extra, IdentifyEvent } from '@amplitude/types';

export enum Environment {
  development = 'development',
  production = 'production'
}

export const ApiKey: Record<Environment, string> = {
  development: '',
  production: ''
}

export interface EventProperties {
    Context?:                       ContextProperties;
    EventMaxIntForTest?:            EventMaxIntForTestProperties;
    EventNoProperties?:             EventNoPropertiesProperties;
    EventObjectTypes?:              EventObjectTypesProperties;
    EventWithAllProperties?:        EventWithAllPropertiesProperties;
    EventWithArrayTypes?:           EventWithArrayTypesProperties;
    EventWithConstTypes?:           EventWithConstTypesProperties;
    EventWithDifferentCasingTypes?: EventWithDifferentCasingTypesProperties;
    EventWithEnumTypes?:            EventWithEnumTypesProperties;
    EventWithOptionalArrayTypes?:   EventWithOptionalArrayTypesProperties;
    EventWithOptionalProperties?:   EventWithOptionalPropertiesProperties;
    Group?:                         GroupProperties;
    Identify?:                      IdentifyProperties;
}

export interface ContextProperties {
}

/**
 * Event to test schema validation
 */
export interface EventMaxIntForTestProperties {
    /**
     * property to test schema validation
     */
    intMax10: number;
}

/**
 * Event w no properties description
 */
export interface EventNoPropertiesProperties {
}

/**
 * Event with Object and Object Array
 */
export interface EventObjectTypesProperties {
    /**
     * Property Object Type
     */
    requiredObject: { [key: string]: any };
    /**
     * Property Object Array Type
     */
    requiredObjectArray: { [key: string]: any }[];
}

/**
 * Event w all properties description
 */
export interface EventWithAllPropertiesProperties {
    /**
     * Event 2 Property - Optional String    *     * Examples:    * Some string, or another
     */
    optionalString?: string;
    /**
     * Event 2 Property - Array
     */
    requiredArray: string[];
    /**
     * Event 2 Property - Boolean
     */
    requiredBoolean: boolean;
    /**
     * Event 2 Property - Enum
     */
    requiredEnum: RequiredEnum;
    /**
     * Event 2 Property - Integer    *     * Examples:    * 5, 4, 3
     */
    requiredInteger: number;
    /**
     * Event 2 Property - Number
     */
    requiredNumber: number;
    /**
     * Event 2 Property - String
     */
    requiredString: string;
}

/**
 * Event 2 Property - Enum
 */
export enum RequiredEnum {
    Enum1 = "Enum1",
    Enum2 = "Enum2",
}

/**
 * Description for event with Array Types
 */
export interface EventWithArrayTypesProperties {
    /**
     * description for required boolean array
     */
    requiredBooleanArray: boolean[];
    /**
     * Description for required number array
     */
    requiredNumberArray: number[];
    /**
     * Description for required object array
     */
    requiredObjectArray: { [key: string]: any }[];
    /**
     * description for required string array
     */
    requiredStringArray: string[];
}

/**
 * Description for event with const types
 */
export interface EventWithConstTypesProperties {
}

/**
 * Description for case with space
 */
export interface EventWithDifferentCasingTypesProperties {
    /**
     * Description for enum with space
     */
    "enum with space": EnumWithSpace;
    /**
     * description_for_enum_snake_case
     */
    enum_snake_case: EnumSnakeCase;
    /**
     * descriptionForEnumCamelCase
     */
    enumCamelCase: EnumCamelCase;
    /**
     * DescirptionForEnumPascalCase
     */
    EnumPascalCase: EnumPascalCase;
    /**
     * Description for case with space
     */
    "property with space": string;
    /**
     * Description_for_snake_case
     */
    property_with_snake_case: string;
    /**
     * descriptionForCamelCase
     */
    propertyWithCamelCase: string;
    /**
     * DescriptionForPascalCase
     */
    PropertyWithPascalCase: string;
}

/**
 * DescirptionForEnumPascalCase
 */
export enum EnumPascalCase {
    EnumPascalCase = "EnumPascalCase",
}

/**
 * Description for enum with space
 */
export enum EnumWithSpace {
    EnumWithSpace = "enum with space",
}

/**
 * descriptionForEnumCamelCase
 */
export enum EnumCamelCase {
    EnumCamelCase = "enumCamelCase",
}

/**
 * description_for_enum_snake_case
 */
export enum EnumSnakeCase {
    EnumSnakeCase = "enum_snake_case",
}

/**
 * Description for event with enum types
 */
export interface EventWithEnumTypesProperties {
    /**
     * Description for required enum
     */
    "optional enum"?: OptionalEnum;
    /**
     * Description for optional enum
     */
    "required enum": RequiredEnumEnum;
}

/**
 * Description for required enum
 */
export enum OptionalEnum {
    OptionalEnum1 = "optional enum 1",
    OptionalEnum2 = "optional enum 2",
}

/**
 * Description for optional enum
 */
export enum RequiredEnumEnum {
    RequiredEnum1 = "required enum 1",
    RequiredEnum2 = "required enum 2",
}

/**
 * Description for event with optional array types
 */
export interface EventWithOptionalArrayTypesProperties {
    /**
     * Description for optional boolean array
     */
    optionalBooleanArray?: boolean[];
    /**
     * Description for optional object array
     */
    optionalJSONArray?: { [key: string]: any }[];
    /**
     * Description for optional number array
     */
    optionalNumberArray?: number[];
    /**
     * Description for optional string array
     */
    optionalStringArray?: string[];
}

/**
 * Event w optional properties description
 */
export interface EventWithOptionalPropertiesProperties {
    optionalArrayNumber?: number[];
    optionalArrayString?: string[];
    optionalBoolean?:     boolean;
    optionalNumber?:      number;
    /**
     * Optional String property description
     */
    optionalString?: string;
}

export interface GroupProperties {
    /**
     * Description for group optionalString
     */
    optionalString?: string;
    /**
     * Description for group requiredBoolean
     */
    requiredBoolean: boolean;
}

export interface IdentifyProperties {
    /**
     * Description for identify optionalArray
     */
    optionalArray?: string[];
    /**
     * Description for identify requiredNumber
     */
    requiredNumber: number;
}


export class Identify extends AmplitudeIdentify {
  event_id_in_plan = 'identify';
  event_version = '0.0.0';
  user_properties: IdentifyProperties;
  userId?: string;
  deviceId?: string;

  constructor(userId: string | undefined, deviceId: string | undefined, user_properties: IdentifyProperties) {
    super();
    this.userId = userId;
    this.deviceId = deviceId;
    this.user_properties = user_properties;
  }

  asIdentifyEvent(): IdentifyEvent {
    const event = this.identifyUser(this.userId, this.deviceId);
    event.event_id_in_plan = this.event_id_in_plan;
    event.event_version = this.event_version;

    return event;
  }
}

export class Context implements BaseEvent {
  event_type = 'Context';
  event_id_in_plan = 'context';
  event_version = '0.0.0';
  constructor() {}
}
export class Group implements BaseEvent {
  event_type = 'Group';
  event_id_in_plan = 'group';
  event_version = '0.0.0';
  event_properties: GroupProperties;

  constructor(event_properties: GroupProperties) {
    this.event_properties = event_properties;
  }
}

export class EventMaxIntForTest implements BaseEvent {
  event_type = 'EventMaxIntForTest';
  event_id_in_plan = 'aa0f08ac-8928-4569-a524-c1699e7da6f4';
  event_version = '1.0.0';


  constructor(
    public event_properties: EventMaxIntForTestProperties,
  ) {}
}

export class EventNoProperties implements BaseEvent {
  event_type = 'Event No Properties';
  event_id_in_plan = '26af925a-be3a-40e5-947d-33da66a5352f';
  event_version = '1.0.0';
}

export class EventObjectTypes implements BaseEvent {
  event_type = 'Event Object Types';
  event_id_in_plan = 'aea72ecc-5a10-4bd7-99a6-81a464aabaed';
  event_version = '1.0.0';


  constructor(
    public event_properties: EventObjectTypesProperties,
  ) {}
}

export class EventWithAllProperties implements BaseEvent {
  event_type = 'Event With All Properties';
  event_id_in_plan = '311ba144-8532-4474-a9bd-8b430625e29a';
  event_version = '1.0.0';
  event_properties: EventWithAllPropertiesProperties & {
    'requiredConst': "some-const-value";
  };


  constructor(
    event_properties: EventWithAllPropertiesProperties,
  ) {
    this.event_properties = {
        ...event_properties,
        'requiredConst': "some-const-value",
      };
  }
}

export class EventWithArrayTypes implements BaseEvent {
  event_type = 'Event With Array Types';
  event_id_in_plan = '5ded19cd-6015-441b-a2be-f954425be1fe';
  event_version = '1.0.0';


  constructor(
    public event_properties: EventWithArrayTypesProperties,
  ) {}
}

export class EventWithConstTypes implements BaseEvent {
  event_type = 'Event With Const Types';
  event_id_in_plan = '321b8f02-1bb3-4b33-8c21-8c55401d62da';
  event_version = '1.0.0';
  event_properties = {
    'String Const WIth Quotes': "\"String \"Const With\" Quotes\"",
    'String Const': "String-Constant",
    'String Int Const': 0,
    'Integer Const': 10,
    'Boolean Const': true,
    'Number Const': 2.2,
  };
}

export class EventWithDifferentCasingTypes implements BaseEvent {
  event_type = 'event withDifferent_CasingTypes';
  event_id_in_plan = 'fcb3d82d-208f-4bc2-b8e1-843683d9b595';
  event_version = '1.0.0';


  constructor(
    public event_properties: EventWithDifferentCasingTypesProperties,
  ) {}
}

export class EventWithEnumTypes implements BaseEvent {
  event_type = 'Event With Enum Types';
  event_id_in_plan = 'b4fc8366-b05d-40d3-b698-79795701624b';
  event_version = '1.0.0';


  constructor(
    public event_properties: EventWithEnumTypesProperties,
  ) {}
}

export class EventWithOptionalArrayTypes implements BaseEvent {
  event_type = 'Event With Optional Array Types';
  event_id_in_plan = '2755da0e-a507-4b18-8f17-86d1d5c499ab';
  event_version = '1.0.0';


  constructor(
    public event_properties?: EventWithOptionalArrayTypesProperties,
  ) {}
}

export class EventWithOptionalProperties implements BaseEvent {
  event_type = 'Event With Optional Properties';
  event_id_in_plan = '00b99136-9d1a-48d8-89d5-25f165ff3ae0';
  event_version = '1.0.0';


  constructor(
    public event_properties?: EventWithOptionalPropertiesProperties,
  ) {}
}


export class Ampli {
  private amplitude: NodeClient;

  constructor(amplitude: NodeClient) {
    this.amplitude = amplitude;
  }
  
  get client() {
    return this.amplitude;
  }

  identify(userId: string, deviceId: string | undefined, properties: IdentifyProperties, extra?: Extra) {
    const identify = new Identify(userId, deviceId, properties);
    this.amplitude.logEvent(identify.asIdentifyEvent(), extra);
  }

  track(userId, event: Event, extra?: Extra) {
    // Merge in
    const ampEvent = {
      ...event,
      user_id: userId
    };
    return this.amplitude.logEvent(ampEvent, extra)
  }

  flush() {
    return this.amplitude.flush();
  }

  // GENERATED EVENT FUNCTIONS
/**
   * Event to test schema validation
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. intMax10)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventMaxIntForTest(
    userId: string,
    properties: EventMaxIntForTestProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventMaxIntForTest(properties), extra);
  }

  /**
   * Event w no properties description
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventNoProperties(
    userId: string,
    extra?: Extra,
  ) {
    return this.track(userId, new EventNoProperties(), extra);
  }

  /**
   * Event with Object and Object Array
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. requiredObjectArray)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventObjectTypes(
    userId: string,
    properties: EventObjectTypesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventObjectTypes(properties), extra);
  }

  /**
   * Event w all properties description
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. requiredInteger)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithAllProperties(
    userId: string,
    properties: EventWithAllPropertiesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithAllProperties(properties), extra);
  }

  /**
   * Description for event with Array Types
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. requiredObjectArray)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithArrayTypes(
    userId: string,
    properties: EventWithArrayTypesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithArrayTypes(properties), extra);
  }

  /**
   * Description for event with const types
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithConstTypes(
    userId: string,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithConstTypes(), extra);
  }

  /**
   * Description for case with space
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. EnumPascalCase)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithDifferentCasingTypes(
    userId: string,
    properties: EventWithDifferentCasingTypesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithDifferentCasingTypes(properties), extra);
  }

  /**
   * Description for event with enum types
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. optional enum)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithEnumTypes(
    userId: string,
    properties: EventWithEnumTypesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithEnumTypes(properties), extra);
  }

  /**
   * Description for event with optional array types
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. optionalJSONArray)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithOptionalArrayTypes(
    userId: string,
    properties?: EventWithOptionalArrayTypesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithOptionalArrayTypes(properties), extra);
  }

  /**
   * Event w optional properties description
   * 
   * Owner: Test codegen
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. optionalArrayNumber)
   * @param extra Extra untyped parameters for use in middleware.
   */
  eventWithOptionalProperties(
    userId: string,
    properties?: EventWithOptionalPropertiesProperties,
    extra?: Extra,
  ) {
    return this.track(userId, new EventWithOptionalProperties(properties), extra);
  }
}

/**
 * Initializes and returns a Ampli instance
 * 
 * @param apiKeyOrNodeClient  A API key (string) or Amplitude.NodeClient instance
 * @return {Ampli}
 */
export function init(apiKeyOrNodeClient: string | NodeClient) {
  const apiKey = typeof(apiKeyOrNodeClient) === 'string' ? apiKeyOrNodeClient : undefined;
  const nodeClient = typeof(apiKeyOrNodeClient) === 'object' ? apiKeyOrNodeClient : initNodeClient(apiKey);
  return new Ampli(nodeClient);
}

const DEFAULT_INSTANCE: string = Environment.development;
const _instances: { [name: string]: Ampli } = {};

/**
 * Get an Ampli instance
 * 
 * @param instance The Environment or name of the desired instance 
 */ 
export function getInstance(instance: Environment | string = DEFAULT_INSTANCE): Ampli {
  let ampli = _instances[instance];
  if (!ampli) {
    const apiKey = ApiKey[instance];
    if (apiKey === undefined || apiKey === '') {
      throw new Error(`No API key or instance found for '${instance}'. Provide a valid environment or call Ampli.setInstance('${instance}', ...) before making this call.`);
    }
    ampli = init(apiKey);
    setInstance(ampli, instance);
  }
  return ampli;
}

/**
 * Stores and instance of Ampli for later retrieval via getInstance()
 * 
 * @param ampli     The Ampli instance 
 * @param instance  The Environment or name of this instance
 */
export function setInstance(ampli: Ampli, instance: Environment | string = DEFAULT_INSTANCE) {
  _instances[instance] = ampli;
}
