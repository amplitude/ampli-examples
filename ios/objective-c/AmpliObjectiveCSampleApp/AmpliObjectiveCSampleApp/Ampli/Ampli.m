/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull obj-c-ampli'
 *
 * Required dependencies: Amplitude-iOS^8.6.0
 * Tracking Plan Version: 0
 * Build: 1.0.0
 *
 * [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/obj-c-ampli)
 */

#import <Foundation/Foundation.h>
#import "Ampli.h"
#import "Amplitude.h"
#import "AMPPlan.h"

@implementation Event

+ (instancetype)withEventType:(NSString *) eventType withEventProperties: (NSDictionary *) eventProperties {
    return [[self alloc] initWithEventType:eventType withEventProperties:eventProperties];
}

- (instancetype)initWithEventType: (NSString *) eventType withEventProperties: (NSDictionary *) eventProperties {
    self = [self init];
    if (self) {
        _eventType = eventType;
        _eventProperties = eventProperties;
    }
    return self;
}

@end

#define Î»(decl, expr) (^(decl) { return (expr); })

static id NSNullify(id _Nullable x) {
    return (x == nil || x == NSNull.null) ? NSNull.null : x;
}

NS_ASSUME_NONNULL_BEGIN

@interface EventProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface ContextProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventMaxIntForTestProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventNoPropertiesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventObjectTypesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithAllPropertiesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithArrayTypesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithConstTypesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithDifferentCasingTypesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithEnumTypesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithOptionalArrayTypesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface EventWithOptionalPropertiesProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface GroupProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@interface IdentifyProperties (JSONConversion)
+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;
- (NSDictionary *)JSONDictionary;
@end

@implementation RequiredEnum
+ (NSDictionary<NSString *, RequiredEnum *> *)values
{
    static NSDictionary<NSString *, RequiredEnum *> *values;
    return values = values ? values : @{
        @"Enum1": [[RequiredEnum alloc] initWithValue:@"Enum1"],
        @"Enum2": [[RequiredEnum alloc] initWithValue:@"Enum2"],
    };
}

+ (RequiredEnum *)enum1 { return RequiredEnum.values[@"Enum1"]; }
+ (RequiredEnum *)enum2 { return RequiredEnum.values[@"Enum2"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return RequiredEnum.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

@implementation EnumCamelCase
+ (NSDictionary<NSString *, EnumCamelCase *> *)values
{
    static NSDictionary<NSString *, EnumCamelCase *> *values;
    return values = values ? values : @{
        @"enumCamelCase": [[EnumCamelCase alloc] initWithValue:@"enumCamelCase"],
    };
}

+ (EnumCamelCase *)enumCamelCase { return EnumCamelCase.values[@"enumCamelCase"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return EnumCamelCase.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

@implementation EnumPascalCase
+ (NSDictionary<NSString *, EnumPascalCase *> *)values
{
    static NSDictionary<NSString *, EnumPascalCase *> *values;
    return values = values ? values : @{
        @"EnumPascalCase": [[EnumPascalCase alloc] initWithValue:@"EnumPascalCase"],
    };
}

+ (EnumPascalCase *)enumPascalCase { return EnumPascalCase.values[@"EnumPascalCase"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return EnumPascalCase.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

@implementation EnumSnakeCase
+ (NSDictionary<NSString *, EnumSnakeCase *> *)values
{
    static NSDictionary<NSString *, EnumSnakeCase *> *values;
    return values = values ? values : @{
        @"enum_snake_case": [[EnumSnakeCase alloc] initWithValue:@"enum_snake_case"],
    };
}

+ (EnumSnakeCase *)enumSnakeCase { return EnumSnakeCase.values[@"enum_snake_case"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return EnumSnakeCase.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

@implementation EnumWithSpace
+ (NSDictionary<NSString *, EnumWithSpace *> *)values
{
    static NSDictionary<NSString *, EnumWithSpace *> *values;
    return values = values ? values : @{
        @"enum with space": [[EnumWithSpace alloc] initWithValue:@"enum with space"],
    };
}

+ (EnumWithSpace *)enumWithSpace { return EnumWithSpace.values[@"enum with space"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return EnumWithSpace.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

@implementation OptionalEnum
+ (NSDictionary<NSString *, OptionalEnum *> *)values
{
    static NSDictionary<NSString *, OptionalEnum *> *values;
    return values = values ? values : @{
        @"optional enum 1": [[OptionalEnum alloc] initWithValue:@"optional enum 1"],
        @"optional enum 2": [[OptionalEnum alloc] initWithValue:@"optional enum 2"],
    };
}

+ (OptionalEnum *)optionalEnum1 { return OptionalEnum.values[@"optional enum 1"]; }
+ (OptionalEnum *)optionalEnum2 { return OptionalEnum.values[@"optional enum 2"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return OptionalEnum.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

@implementation RequiredEnumEnum
+ (NSDictionary<NSString *, RequiredEnumEnum *> *)values
{
    static NSDictionary<NSString *, RequiredEnumEnum *> *values;
    return values = values ? values : @{
        @"required enum 1": [[RequiredEnumEnum alloc] initWithValue:@"required enum 1"],
        @"required enum 2": [[RequiredEnumEnum alloc] initWithValue:@"required enum 2"],
    };
}

+ (RequiredEnumEnum *)requiredEnum1 { return RequiredEnumEnum.values[@"required enum 1"]; }
+ (RequiredEnumEnum *)requiredEnum2 { return RequiredEnumEnum.values[@"required enum 2"]; }

+ (instancetype _Nullable)withValue:(NSString *)value
{
    return RequiredEnumEnum.values[value];
}

- (instancetype)initWithValue:(NSString *)value
{
    if (self = [super init]) _value = value;
    return self;
}

- (NSUInteger)hash { return _value.hash; }
@end

static id map(id collection, id (^f)(id value)) {
    id result = nil;
    if ([collection isKindOfClass:NSArray.class]) {
        result = [NSMutableArray arrayWithCapacity:[collection count]];
        for (id x in collection) [result addObject:f(x)];
    } else if ([collection isKindOfClass:NSDictionary.class]) {
        result = [NSMutableDictionary dictionaryWithCapacity:[collection count]];
        for (id key in collection) [result setObject:f([collection objectForKey:key]) forKey:key];
    }
    return result;
}

#pragma mark - JSON serialization

EventProperties *_Nullable EventPropertiesFromData(NSData *data, NSError **error)
{
    @try {
        id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:error];
        return *error ? nil : [EventProperties fromJSONDictionary:json];
    } @catch (NSException *exception) {
        *error = [NSError errorWithDomain:@"JSONSerialization" code:-1 userInfo:@{ @"exception": exception }];
        return nil;
    }
}

EventProperties *_Nullable EventPropertiesFromJSON(NSString *json, NSStringEncoding encoding, NSError **error)
{
    return EventPropertiesFromData([json dataUsingEncoding:encoding], error);
}

NSData *_Nullable EventPropertiesToData(EventProperties *eventProperties, NSError **error)
{
    @try {
        id json = [eventProperties JSONDictionary];
        NSData *data = [NSJSONSerialization dataWithJSONObject:json options:kNilOptions error:error];
        return *error ? nil : data;
    } @catch (NSException *exception) {
        *error = [NSError errorWithDomain:@"JSONSerialization" code:-1 userInfo:@{ @"exception": exception }];
        return nil;
    }
}

NSString *_Nullable EventPropertiesToJSON(EventProperties *eventProperties, NSStringEncoding encoding, NSError **error)
{
    NSData *data = EventPropertiesToData(eventProperties, error);
    return data ? [[NSString alloc] initWithData:data encoding:encoding] : nil;
}

@implementation EventProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"Context": @"context",
        @"EventMaxIntForTest": @"eventMaxIntForTest",
        @"EventNoProperties": @"eventNoProperties",
        @"EventObjectTypes": @"eventObjectTypes",
        @"EventWithAllProperties": @"eventWithAllProperties",
        @"EventWithArrayTypes": @"eventWithArrayTypes",
        @"EventWithConstTypes": @"eventWithConstTypes",
        @"EventWithDifferentCasingTypes": @"eventWithDifferentCasingTypes",
        @"EventWithEnumTypes": @"eventWithEnumTypes",
        @"EventWithOptionalArrayTypes": @"eventWithOptionalArrayTypes",
        @"EventWithOptionalProperties": @"eventWithOptionalProperties",
        @"Group": @"group",
        @"Identify": @"identify",
    };
}

+ (_Nullable instancetype)fromData:(NSData *)data error:(NSError *_Nullable *)error
{
    return EventPropertiesFromData(data, error);
}

+ (_Nullable instancetype)fromJSON:(NSString *)json encoding:(NSStringEncoding)encoding error:(NSError *_Nullable *)error
{
    return EventPropertiesFromJSON(json, encoding, error);
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
        _context = [ContextProperties fromJSONDictionary:(id)_context];
        _eventMaxIntForTest = [EventMaxIntForTestProperties fromJSONDictionary:(id)_eventMaxIntForTest];
        _eventNoProperties = [EventNoPropertiesProperties fromJSONDictionary:(id)_eventNoProperties];
        _eventObjectTypes = [EventObjectTypesProperties fromJSONDictionary:(id)_eventObjectTypes];
        _eventWithAllProperties = [EventWithAllPropertiesProperties fromJSONDictionary:(id)_eventWithAllProperties];
        _eventWithArrayTypes = [EventWithArrayTypesProperties fromJSONDictionary:(id)_eventWithArrayTypes];
        _eventWithConstTypes = [EventWithConstTypesProperties fromJSONDictionary:(id)_eventWithConstTypes];
        _eventWithDifferentCasingTypes = [EventWithDifferentCasingTypesProperties fromJSONDictionary:(id)_eventWithDifferentCasingTypes];
        _eventWithEnumTypes = [EventWithEnumTypesProperties fromJSONDictionary:(id)_eventWithEnumTypes];
        _eventWithOptionalArrayTypes = [EventWithOptionalArrayTypesProperties fromJSONDictionary:(id)_eventWithOptionalArrayTypes];
        _eventWithOptionalProperties = [EventWithOptionalPropertiesProperties fromJSONDictionary:(id)_eventWithOptionalProperties];
        _group = [GroupProperties fromJSONDictionary:(id)_group];
        _identify = [IdentifyProperties fromJSONDictionary:(id)_identify];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    id dict = [[self dictionaryWithValuesForKeys:EventProperties.properties.allValues] mutableCopy];

    for (id jsonName in EventProperties.properties) {
        id propertyName = EventProperties.properties[jsonName];
        if (![jsonName isEqualToString:propertyName]) {
            dict[jsonName] = dict[propertyName];
            [dict removeObjectForKey:propertyName];
        }
    }

    [dict addEntriesFromDictionary:@{
        @"Context": NSNullify([_context JSONDictionary]),
        @"EventMaxIntForTest": NSNullify([_eventMaxIntForTest JSONDictionary]),
        @"EventNoProperties": NSNullify([_eventNoProperties JSONDictionary]),
        @"EventObjectTypes": NSNullify([_eventObjectTypes JSONDictionary]),
        @"EventWithAllProperties": NSNullify([_eventWithAllProperties JSONDictionary]),
        @"EventWithArrayTypes": NSNullify([_eventWithArrayTypes JSONDictionary]),
        @"EventWithConstTypes": NSNullify([_eventWithConstTypes JSONDictionary]),
        @"EventWithDifferentCasingTypes": NSNullify([_eventWithDifferentCasingTypes JSONDictionary]),
        @"EventWithEnumTypes": NSNullify([_eventWithEnumTypes JSONDictionary]),
        @"EventWithOptionalArrayTypes": NSNullify([_eventWithOptionalArrayTypes JSONDictionary]),
        @"EventWithOptionalProperties": NSNullify([_eventWithOptionalProperties JSONDictionary]),
        @"Group": NSNullify([_group JSONDictionary]),
        @"Identify": NSNullify([_identify JSONDictionary]),
    }];

    return dict;
}

- (NSData *_Nullable)toData:(NSError *_Nullable *)error
{
    return EventPropertiesToData(self, error);
}

- (NSString *_Nullable)toJSON:(NSStringEncoding)encoding error:(NSError *_Nullable *)error
{
    return EventPropertiesToJSON(self, encoding, error);
}
@end

@implementation ContextProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[ContextProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = ContextProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = ContextProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:ContextProperties.properties.allValues];
}
@end

@implementation EventMaxIntForTestProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"intMax10": @"intMax10",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventMaxIntForTestProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventMaxIntForTestProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventMaxIntForTestProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:EventMaxIntForTestProperties.properties.allValues];
}
@end

@implementation EventNoPropertiesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventNoPropertiesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventNoPropertiesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventNoPropertiesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:EventNoPropertiesProperties.properties.allValues];
}
@end

@implementation EventObjectTypesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"requiredObject": @"requiredObject",
        @"requiredObjectArray": @"requiredObjectArray",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventObjectTypesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventObjectTypesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventObjectTypesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:EventObjectTypesProperties.properties.allValues];
}
@end

@implementation EventWithAllPropertiesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"optionalString": @"optionalString",
        @"requiredArray": @"requiredArray",
        @"requiredBoolean": @"requiredBoolean",
        @"requiredEnum": @"requiredEnum",
        @"requiredInteger": @"requiredInteger",
        @"requiredNumber": @"requiredNumber",
        @"requiredString": @"requiredString",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithAllPropertiesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
        _requiredEnum = [RequiredEnum withValue:(id)_requiredEnum];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithAllPropertiesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithAllPropertiesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    id dict = [[self dictionaryWithValuesForKeys:EventWithAllPropertiesProperties.properties.allValues] mutableCopy];

    [dict addEntriesFromDictionary:@{
        @"requiredBoolean": _requiredBoolean ? @YES : @NO,
        @"requiredEnum": [_requiredEnum value],
    }];

    return dict;
}
@end

@implementation EventWithArrayTypesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"requiredBooleanArray": @"requiredBooleanArray",
        @"requiredNumberArray": @"requiredNumberArray",
        @"requiredObjectArray": @"requiredObjectArray",
        @"requiredStringArray": @"requiredStringArray",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithArrayTypesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithArrayTypesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithArrayTypesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:EventWithArrayTypesProperties.properties.allValues];
}
@end

@implementation EventWithConstTypesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithConstTypesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithConstTypesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithConstTypesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:EventWithConstTypesProperties.properties.allValues];
}
@end

@implementation EventWithDifferentCasingTypesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"enum with space": @"enumWithSpace",
        @"enum_snake_case": @"enumSnakeCase",
        @"enumCamelCase": @"enumCamelCase",
        @"EnumPascalCase": @"enumPascalCase",
        @"property with space": @"propertyWithSpace",
        @"property_with_snake_case": @"propertyWithSnakeCase",
        @"propertyWithCamelCase": @"propertyWithCamelCase",
        @"PropertyWithPascalCase": @"propertyWithPascalCase",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithDifferentCasingTypesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
        _enumWithSpace = [EnumWithSpace withValue:(id)_enumWithSpace];
        _enumSnakeCase = [EnumSnakeCase withValue:(id)_enumSnakeCase];
        _enumCamelCase = [EnumCamelCase withValue:(id)_enumCamelCase];
        _enumPascalCase = [EnumPascalCase withValue:(id)_enumPascalCase];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithDifferentCasingTypesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithDifferentCasingTypesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    id dict = [[self dictionaryWithValuesForKeys:EventWithDifferentCasingTypesProperties.properties.allValues] mutableCopy];

    for (id jsonName in EventWithDifferentCasingTypesProperties.properties) {
        id propertyName = EventWithDifferentCasingTypesProperties.properties[jsonName];
        if (![jsonName isEqualToString:propertyName]) {
            dict[jsonName] = dict[propertyName];
            [dict removeObjectForKey:propertyName];
        }
    }

    [dict addEntriesFromDictionary:@{
        @"enum with space": [_enumWithSpace value],
        @"enum_snake_case": [_enumSnakeCase value],
        @"enumCamelCase": [_enumCamelCase value],
        @"EnumPascalCase": [_enumPascalCase value],
    }];

    return dict;
}
@end

@implementation EventWithEnumTypesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"optional enum": @"optionalEnum",
        @"required enum": @"requiredEnum",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithEnumTypesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
        _optionalEnum = [OptionalEnum withValue:(id)_optionalEnum];
        _requiredEnum = [RequiredEnumEnum withValue:(id)_requiredEnum];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithEnumTypesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithEnumTypesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    id dict = [[self dictionaryWithValuesForKeys:EventWithEnumTypesProperties.properties.allValues] mutableCopy];

    for (id jsonName in EventWithEnumTypesProperties.properties) {
        id propertyName = EventWithEnumTypesProperties.properties[jsonName];
        if (![jsonName isEqualToString:propertyName]) {
            dict[jsonName] = dict[propertyName];
            [dict removeObjectForKey:propertyName];
        }
    }

    [dict addEntriesFromDictionary:@{
        @"optional enum": NSNullify([_optionalEnum value]),
        @"required enum": [_requiredEnum value],
    }];

    return dict;
}
@end

@implementation EventWithOptionalArrayTypesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"optionalBooleanArray": @"optionalBooleanArray",
        @"optionalJSONArray": @"optionalJsonArray",
        @"optionalNumberArray": @"optionalNumberArray",
        @"optionalStringArray": @"optionalStringArray",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithOptionalArrayTypesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithOptionalArrayTypesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithOptionalArrayTypesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    id dict = [[self dictionaryWithValuesForKeys:EventWithOptionalArrayTypesProperties.properties.allValues] mutableCopy];

    for (id jsonName in EventWithOptionalArrayTypesProperties.properties) {
        id propertyName = EventWithOptionalArrayTypesProperties.properties[jsonName];
        if (![jsonName isEqualToString:propertyName]) {
            dict[jsonName] = dict[propertyName];
            [dict removeObjectForKey:propertyName];
        }
    }

    return dict;
}
@end

@implementation EventWithOptionalPropertiesProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"optionalArrayNumber": @"optionalArrayNumber",
        @"optionalArrayString": @"optionalArrayString",
        @"optionalBoolean": @"optionalBoolean",
        @"optionalNumber": @"optionalNumber",
        @"optionalString": @"optionalString",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[EventWithOptionalPropertiesProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = EventWithOptionalPropertiesProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = EventWithOptionalPropertiesProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:EventWithOptionalPropertiesProperties.properties.allValues];
}
@end

@implementation GroupProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"optionalString": @"optionalString",
        @"requiredBoolean": @"requiredBoolean",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[GroupProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = GroupProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = GroupProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    id dict = [[self dictionaryWithValuesForKeys:GroupProperties.properties.allValues] mutableCopy];

    [dict addEntriesFromDictionary:@{
        @"requiredBoolean": _requiredBoolean ? @YES : @NO,
    }];

    return dict;
}
@end

@implementation IdentifyProperties
+ (NSDictionary<NSString *, NSString *> *)properties
{
    static NSDictionary<NSString *, NSString *> *properties;
    return properties = properties ? properties : @{
        @"optionalArray": @"optionalArray",
        @"requiredNumber": @"requiredNumber",
    };
}

+ (instancetype)fromJSONDictionary:(NSDictionary *)dict
{
    return dict ? [[IdentifyProperties alloc] initWithJSONDictionary:dict] : nil;
}

- (instancetype)initWithJSONDictionary:(NSDictionary *)dict
{
    if (self = [super init]) {
        [self setValuesForKeysWithDictionary:dict];
    }
    return self;
}

- (void)setValue:(nullable id)value forKey:(NSString *)key
{
    id resolved = IdentifyProperties.properties[key];
    if (resolved) [super setValue:value forKey:resolved];
}

- (void)setNilValueForKey:(NSString *)key
{
    id resolved = IdentifyProperties.properties[key];
    if (resolved) [super setValue:@(0) forKey:resolved];
}

- (NSDictionary *)JSONDictionary
{
    return [self dictionaryWithValuesForKeys:IdentifyProperties.properties.allValues];
}
@end

NS_ASSUME_NONNULL_END

@implementation Context: Event

+ (instancetype _Nonnull)initEvent {
    return [self withEventType:@"Context" withEventProperties:nil];
}

@end

@implementation Identify: Event

+ (instancetype _Nonnull)initWithEventProperties: (IdentifyProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Identify" withEventProperties:propertyDict];
}

@end

@implementation Group: Event

+ (instancetype _Nonnull)initWithEventProperties: (GroupProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Group" withEventProperties:propertyDict];
}

@end

@implementation EventMaxIntForTest: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventMaxIntForTestProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"EventMaxIntForTest" withEventProperties:propertyDict];
}

@end

@implementation EventNoProperties: Event

+ (instancetype _Nonnull)initEvent {
    return [self withEventType:@"Event No Properties" withEventProperties:nil];
}

@end

@implementation EventObjectTypes: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventObjectTypesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Event Object Types" withEventProperties:propertyDict];
}

@end

@implementation EventWithAllProperties: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventWithAllPropertiesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{
        @"requiredConst": @"some-const-value"
    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Event With All Properties" withEventProperties:propertyDict];
}

@end

@implementation EventWithArrayTypes: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventWithArrayTypesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Event With Array Types" withEventProperties:propertyDict];
}

@end

@implementation EventWithConstTypes: Event

+ (instancetype _Nonnull)initEvent {
    NSDictionary *propertyDict = @{
        @"Boolean Const": @true,
        @"Integer Const": @10,
        @"Number Const": @2.2,
        @"String Const": @"String-Constant",
        @"String Const WIth Quotes": @"\"String \"Const With\" Quotes\"",
        @"String Int Const": @0
    };

    return [self withEventType:@"Event With Const Types" withEventProperties:propertyDict];
}

@end

@implementation EventWithDifferentCasingTypes: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventWithDifferentCasingTypesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"event withDifferent_CasingTypes" withEventProperties:propertyDict];
}

@end

@implementation EventWithEnumTypes: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventWithEnumTypesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Event With Enum Types" withEventProperties:propertyDict];
}

@end

@implementation EventWithOptionalArrayTypes: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventWithOptionalArrayTypesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Event With Optional Array Types" withEventProperties:propertyDict];
}

@end

@implementation EventWithOptionalProperties: Event

+ (instancetype _Nonnull)initWithEventProperties: (EventWithOptionalPropertiesProperties *_Nonnull)eventProperties {
    NSDictionary *constPropertyDict = @{

    };
    NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
    NSDictionary *nonConstPropertyDict = [eventProperties JSONDictionary];
    [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

    return [self withEventType:@"Event With Optional Properties" withEventProperties:propertyDict];
}

@end

@implementation LoadClientOptions

- (instancetype)initLoadClientOptions:(NSString *_Nullable)apiKey instance:(Amplitude *_Nullable)instance {
    self = [self init];
    if (self) {
        _apiKey = apiKey;
        _instance = instance;
    }
    return self;
}

@end

@implementation LoadOptions

- (instancetype) initLoadOptions:(AmpliEnvironment)environment disabled:(BOOL) disabled client:(LoadClientOptions *_Nullable)client{
    self = [self init];
    if (self) {
        _environment = environment;
        _disabled = disabled;
        _client = client;
    }
    return self;
}

+ (instancetype) builderBlock:(void (^)(LoadOptionsBuilder*))buildBlock {
    LoadOptionsBuilder *builder = [[LoadOptionsBuilder alloc] initWithOptions:nil];
    buildBlock(builder);
    return [builder build];
}

- (instancetype) withOverrides:(void (^)(LoadOptionsBuilder*))buildBlock {
    LoadOptionsBuilder *builder = [[LoadOptionsBuilder alloc] initWithOptions:self];
    buildBlock(builder);
    return [builder build];
}

@end

@implementation LoadOptionsBuilder

- (instancetype)initWithOptions:(LoadOptions *)options {
    self = [self init];
    if (self) {
        _environment = options != nil ? options.environment : development;
        _disabled = options != nil ? options.environment : NO;
        _instance = options != nil && options.client != nil ? options.client.instance : nil;
        _apiKey = options != nil && options.client != nil ? options.client.apiKey : nil;
    }
    return self;
}

- (LoadOptions *_Nonnull)build {
    LoadClientOptions *client = [[LoadClientOptions alloc] initLoadClientOptions:_apiKey instance:_instance];
    return [[LoadOptions alloc] initLoadOptions:_environment disabled:_disabled client:client];
}

@end

@implementation EventOptions
- (instancetype)initWithUserId:(NSString *_Nullable)userId deviceId:(NSString *_Nullable)deviceId {
    self = [self init];
    if (self) {
        _deviceId = deviceId;
        _userId = userId;
    }
    return self;
}

+ (instancetype) builderBlock:(void (^)(EventOptionsBuilder*))buildBlock {
    EventOptionsBuilder *builder = [[EventOptionsBuilder alloc] initWithOptions:nil];
    buildBlock(builder);
    return [builder build];
}

- (instancetype) withOverrides:(void (^)(EventOptionsBuilder*))buildBlock {
    EventOptionsBuilder *builder = [[EventOptionsBuilder alloc] initWithOptions:self];
    buildBlock(builder);
    return [builder build];
}

@end

@implementation EventOptionsBuilder

- (instancetype)initWithOptions:(EventOptions *)options {
    self = [self init];
    if (self) {
        _userId = options != nil ? options.userId : nil;
        _deviceId = options != nil ? options.deviceId : nil;
    }
    return self;
}

- (EventOptions *_Nonnull)build {
    return [[EventOptions alloc] initWithUserId:_userId deviceId:_deviceId];
}

@end

@implementation Ampli

+ (instancetype)instance {
    static Ampli *ampli = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        ampli = [[self alloc] init];
    });
    return ampli;
}

- (instancetype)init {
    self = [super init];
    if (self) {
        _disabled = NO;
    }
    return self;
}

- (void)load {
    [self load:nil];
}

- (void)load:(LoadOptions *_Nullable)options {
    NSDictionary *ApiKey = @{
        @(development): @"",
        @(production): @""
    };
    self.disabled = options != nil ? options.disabled : NO;
    if (_client != nil) {
        NSLog(@"Warning: Ampli is already initialized. Ampli.instance.load() should be called once at application start up.");
        return;
    }
    AmpliEnvironment env = options != nil ? options.environment : development;
    NSString *apiKey = options != nil && options.client != nil && options.client.apiKey != nil ? options.client.apiKey : ApiKey[@(env)];

    if (options != nil && options.client != nil && options.client.instance != nil) {
        _client = options.client.instance;
    } else if (apiKey != nil) {
        _client = [Amplitude instance];
        [_client initializeApiKey:apiKey];
    } else {
        NSLog(@"ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
        return;
    }
    if (_client != nil) {
        AMPPlan *AmpliObservePlan = [[[[AMPPlan plan] setBranch:@"main"] setSource:@"obj-c-ampli"] setVersion:@"0"];
        [_client setPlan:AmpliObservePlan];
    }
}

- (void)track:(Event *_Nonnull)event {
    [self track:event extra:nil];
}

- (void)track:(Event *_Nonnull)event extra:(MiddlewareExtra *_Nullable)extra {
    [self track:event options:nil extra:extra];
}

- (void)track:(Event *_Nonnull)event options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    if (![self isInitializedAndEnabld]) {
        return;
    }
    [self.client logEvent:event.eventType withEventProperties:event.eventProperties withMiddlewareExtra:extra];
}

- (void)identify:(NSString *_Nullable)userId properties:(IdentifyProperties *_Nullable)properties {
    [self identify:userId properties:properties options:nil extra:nil];
}

- (void)identify:(NSString *_Nullable)userId properties:(IdentifyProperties *_Nullable)properties options:(EventOptions *_Nullable)options {
    [self identify:userId properties:properties options:options extra:nil];
}

- (void)identify:(NSString *_Nullable)userId properties:(IdentifyProperties *_Nullable)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self identify:userId properties:properties options:nil extra:extra];
}

- (void)identify:(NSString *_Nullable)userId properties:(IdentifyProperties *_Nullable)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    if (![self isInitializedAndEnabld]) {
        return;
    }
    if (userId != nil) {
        [self.client setUserId:userId];
    }
    if (options != nil && options.deviceId != nil) {
        [self.client setDeviceId:options.deviceId];
    }
    if (properties != nil) {
        AMPIdentify *identifyArgs = [AMPIdentify identify];
            NSDictionary *constPropertyDict = @{

            };
            NSMutableDictionary *propertyDict = [constPropertyDict mutableCopy];
            NSDictionary *nonConstPropertyDict = [properties JSONDictionary];
            [propertyDict addEntriesFromDictionary:nonConstPropertyDict];

        [propertyDict enumerateKeysAndObjectsUsingBlock:^(id key, id value, BOOL* stop) {
          [identifyArgs set:key value:value];
        }];
        [self.client identify:identifyArgs];
    }
}

- (void)setGroup:(NSString *)name value:(NSString *)value {
    [self setGroup:name value:value options:nil extra:nil];
}

- (void)setGroup:(NSString *)name value:(NSString *)value options:(EventOptions *_Nullable)options {
    [self setGroup:name value:value options:options extra:nil];
}

- (void)setGroup:(NSString *)name value:(NSString *)value extra:(MiddlewareExtra *_Nullable)extra {
    [self setGroup:name value:value options:nil extra:extra];
}

- (void)setGroup:(NSString *)name value:(NSString *)value options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    if (![self isInitializedAndEnabld]) {
        return;
    }
    [self handleEventOptions:options];
    [self.client setGroup:name groupName:value];
}

- (void)flush {
    if (![self isInitializedAndEnabld]) {
        return;
    }
    if (self.client != nil) {
        [self.client uploadEvents];
    }
}
- (void)eventMaxIntForTest:(EventMaxIntForTestProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventMaxIntForTest initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventMaxIntForTest:(EventMaxIntForTestProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventMaxIntForTest initWithEventProperties:properties] extra: extra];
}

- (void)eventMaxIntForTest:(EventMaxIntForTestProperties *_Nonnull)properties {
    [self track:[EventMaxIntForTest initWithEventProperties:properties] extra: nil];
}

- (void)eventNoProperties:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventNoProperties initEvent] options:options extra: extra];
}

- (void)eventNoProperties:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventNoProperties initEvent] extra: extra];
}

- (void)eventNoProperties {
    [self track:[EventNoProperties initEvent] extra: nil];
}

- (void)eventObjectTypes:(EventObjectTypesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventObjectTypes initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventObjectTypes:(EventObjectTypesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventObjectTypes initWithEventProperties:properties] extra: extra];
}

- (void)eventObjectTypes:(EventObjectTypesProperties *_Nonnull)properties {
    [self track:[EventObjectTypes initWithEventProperties:properties] extra: nil];
}

- (void)eventWithAllProperties:(EventWithAllPropertiesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithAllProperties initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventWithAllProperties:(EventWithAllPropertiesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithAllProperties initWithEventProperties:properties] extra: extra];
}

- (void)eventWithAllProperties:(EventWithAllPropertiesProperties *_Nonnull)properties {
    [self track:[EventWithAllProperties initWithEventProperties:properties] extra: nil];
}

- (void)eventWithArrayTypes:(EventWithArrayTypesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithArrayTypes initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventWithArrayTypes:(EventWithArrayTypesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithArrayTypes initWithEventProperties:properties] extra: extra];
}

- (void)eventWithArrayTypes:(EventWithArrayTypesProperties *_Nonnull)properties {
    [self track:[EventWithArrayTypes initWithEventProperties:properties] extra: nil];
}

- (void)eventWithConstTypes:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithConstTypes initEvent] options:options extra: extra];
}

- (void)eventWithConstTypes:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithConstTypes initEvent] extra: extra];
}

- (void)eventWithConstTypes {
    [self track:[EventWithConstTypes initEvent] extra: nil];
}

- (void)eventWithDifferentCasingTypes:(EventWithDifferentCasingTypesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithDifferentCasingTypes initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventWithDifferentCasingTypes:(EventWithDifferentCasingTypesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithDifferentCasingTypes initWithEventProperties:properties] extra: extra];
}

- (void)eventWithDifferentCasingTypes:(EventWithDifferentCasingTypesProperties *_Nonnull)properties {
    [self track:[EventWithDifferentCasingTypes initWithEventProperties:properties] extra: nil];
}

- (void)eventWithEnumTypes:(EventWithEnumTypesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithEnumTypes initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventWithEnumTypes:(EventWithEnumTypesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithEnumTypes initWithEventProperties:properties] extra: extra];
}

- (void)eventWithEnumTypes:(EventWithEnumTypesProperties *_Nonnull)properties {
    [self track:[EventWithEnumTypes initWithEventProperties:properties] extra: nil];
}

- (void)eventWithOptionalArrayTypes:(EventWithOptionalArrayTypesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithOptionalArrayTypes initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventWithOptionalArrayTypes:(EventWithOptionalArrayTypesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithOptionalArrayTypes initWithEventProperties:properties] extra: extra];
}

- (void)eventWithOptionalArrayTypes:(EventWithOptionalArrayTypesProperties *_Nonnull)properties {
    [self track:[EventWithOptionalArrayTypes initWithEventProperties:properties] extra: nil];
}

- (void)eventWithOptionalProperties:(EventWithOptionalPropertiesProperties *_Nonnull)properties options:(EventOptions *_Nullable)options extra:(MiddlewareExtra *_Nullable)extra {
    [self handleEventOptions:options];
    [self track:[EventWithOptionalProperties initWithEventProperties:properties] options:options extra: extra];
}

- (void)eventWithOptionalProperties:(EventWithOptionalPropertiesProperties *_Nonnull)properties extra:(MiddlewareExtra *_Nullable)extra {
    [self track:[EventWithOptionalProperties initWithEventProperties:properties] extra: extra];
}

- (void)eventWithOptionalProperties:(EventWithOptionalPropertiesProperties *_Nonnull)properties {
    [self track:[EventWithOptionalProperties initWithEventProperties:properties] extra: nil];
}

- (BOOL)isInitializedAndEnabld {
    if (self.client == nil) {
        NSLog(@"Ampli is not yet initialized. Have you called `ampli.load()` on app start?");
       return NO;
    }
    return !self.disabled;
}

- (void)handleEventOptions:(EventOptions *)options {
    if (options == nil || ![self isInitializedAndEnabld]) {
        return;
    }
    if (options.userId != nil) {
        [self.client setUserId:options.userId];
    }
    if (options.deviceId != nil) {
        [self.client setDeviceId:options.deviceId];
    }
}

@end
