//
// Ampli - A strong typed wrapper for your Analytics
//
// This file is generated by Amplitude.
// To update run 'ampli pull java-ampli'
//
// Required dependencies: com.amplitude:android-sdk:2.37.0, com.squareup.okhttp3:okhttp:4.2.2
// Tracking Plan Version: 0
// Build: 1.0.0
// Runtime: android:java-ampli
//
// [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
//
// [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/java-ampli)
//
package com.amplitude.ampli;

import java.util.HashMap;

public class EventWithTemplateProperties extends Event {
    private EventWithTemplateProperties(Builder builder) {
        super("Event With Template Properties", builder.properties);
    }

    public static IRequiredEventProperty builder() { return new Builder(); }

    // Inner Builder class with required properties
    public static class Builder implements IRequiredEventProperty, IRequiredTemplateProperty, IBuild {
        private final HashMap<String, Object> properties = new HashMap<>();

        private Builder() {

        }

        /**
         * required_event_property description
         * <p>
         * Must be followed by {@link IRequiredTemplateProperty#requiredTemplateProperty(String)
         */
        public IRequiredTemplateProperty requiredEventProperty(String requiredEventProperty) {
            this.properties.put("required_event_property", requiredEventProperty);
            return this;
        }

        /**
         * required_template_property description
         * <p>
         * Must be followed by by additional optional properties or build() method
         */
        public IBuild requiredTemplateProperty(String requiredTemplateProperty) {
            this.properties.put("required_template_property", requiredTemplateProperty);
            return this;
        }

        /**
         * optional_event_property description
         */
        public IBuild optionalEventProperty(Double optionalEventProperty) {
            this.properties.put("optional_event_property", optionalEventProperty);
            return this;
        }

        /**
         * optional_template_property description
         */
        public IBuild optionalTemplateProperty(Double optionalTemplateProperty) {
            this.properties.put("optional_template_property", optionalTemplateProperty);
            return this;
        }

        public EventWithTemplateProperties build() {
            return new EventWithTemplateProperties(this);
        }
    }

    // Required property interfaces
    public interface IRequiredEventProperty {
        IRequiredTemplateProperty requiredEventProperty(String requiredEventProperty);
    }

    public interface IRequiredTemplateProperty {
        IBuild requiredTemplateProperty(String requiredTemplateProperty);
    }

    /** Build interface with optional properties */
    public interface IBuild {
        IBuild optionalEventProperty(Double optionalEventProperty);
        IBuild optionalTemplateProperty(Double optionalTemplateProperty);
        EventWithTemplateProperties build();
    }
}
