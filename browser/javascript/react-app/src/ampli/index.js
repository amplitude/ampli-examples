/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull browser-js-ampli'
 *
 * Required dependencies: amplitude-js
 * Tracking Plan Version: 0
 * Build: 1.0.0
 *
 * [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/browser-js-ampli)
 */

/* tslint:disable */
/* eslint-disable */

import amplitude, { Identify as AmplitudeIdentify } from 'amplitude-js';

/**
 * @typedef {BaseEvent}
 * @type {object}
 * @property {string} event_type
 * @property {Object.<string, *>} event_properties
 * @property {Plan} plan
 */

/**
 * @typedef {Plan}
 * @type {object}
 * @property {string} [branch]
 * @property {string} [source]
 * @property {string} [version]
 */

/**
 * Data to be processed by middleware
 * @typedef {MiddlewarePayload}
 * @type {object}
 * @property {string} event
 * @property {string} [extra]
 */

/**
 * Function called at the end of each Middleware to run the next middleware in the chain
 * @typedef {MiddlewareNext}
 * @type {function}
 * @param {MiddlewarePayload} payload
 * 
 * @return
 */

/**
 * A function to run on the Event stream (each logEvent call)
 * @typedef {Middleware}
 * @type {function}
 * @param {MiddlewarePayload} payload The event and extra data being sent
 * @param {MiddlewareNext} next Function to run the next middleware in the chain, not calling next will end the middleware chain
 * @return
 */

/**
 * @typedef {Object} EventOptions
 * @type {object}
 */

/**
 * @typedef {Object} IdentifyOptions
 * @type {object}
 */

/**
 * @typedef {Object} GroupOptions
 * @type {object}
 */

/**
 * @typedef {Object} MiddlewareExtra
 * @type {Object.<string, *>}
 */

/**
 * @typedef Environment
 * @readonly
 * @type {object}
 * @property {string} development
 * @property {string} production
 */
export const Environment = {
  development: 'development',
  production: 'production'
}

/**
 * @typedef ApiKey
 * @type {object}
 * @property {string} development
 * @property {string} production
 */
export const ApiKey = {
  development: '',
  production: ''
};

export const SpecialEventType = {
  Identify: "Identify",
  Group: "Group"
}

/**
* Default Amplitude Config. Contains tracking plan information.
*/
export const DefaultConfig = {
  plan: {
    version: '0',
    branch: 'main',
    source: 'browser-js-ampli'
  }
};


export class EventMaxIntForTest {
  constructor(properties) {
    this.event_type = 'EventMaxIntForTest';
    this.event_properties = properties;
  }
}

export class EventNoProperties {
  constructor() {
    this.event_type = 'Event No Properties';
  }
}

export class EventObjectTypes {
  constructor(properties) {
    this.event_type = 'Event Object Types';
    this.event_properties = properties;
  }
}

export class EventWithAllProperties {
  constructor(properties) {
    this.event_type = 'Event With All Properties';
    this.event_properties = {
      ...properties,
      'requiredConst': "some-const-value",
    };
  }
}

export class EventWithArrayTypes {
  constructor(properties) {
    this.event_type = 'Event With Array Types';
    this.event_properties = properties;
  }
}

export class EventWithConstTypes {
  constructor() {
    this.event_type = 'Event With Const Types';
    this.event_properties = {
      'String Const WIth Quotes': "\"String \"Const With\" Quotes\"",
      'String Const': "String-Constant",
      'String Int Const': 0,
      'Integer Const': 10,
      'Boolean Const': true,
      'Number Const': 2.2,
    };
  }
}

export class EventWithDifferentCasingTypes {
  constructor(properties) {
    this.event_type = 'event withDifferent_CasingTypes';
    this.event_properties = properties;
  }
}

export class EventWithEnumTypes {
  constructor(properties) {
    this.event_type = 'Event With Enum Types';
    this.event_properties = properties;
  }
}

export class EventWithOptionalArrayTypes {
  constructor(properties) {
    this.event_type = 'Event With Optional Array Types';
    this.event_properties = properties;
  }
}

export class EventWithOptionalProperties {
  constructor(properties) {
    this.event_type = 'Event With Optional Properties';
    this.event_properties = properties;
  }
}


// prettier-ignore
export class Ampli {
  constructor(amplitude) {
    this.amplitude = amplitude;
    this.middlewares = [];
  }

  get client() {
    return this.amplitude;
  }

  /**
   * Identify a user and set user properties.
   *
   * @param [userId]  The user's id.
   * @param [deviceId] The device id.
   * @param {IdentifyProperties} properties The user's properties.
   * @param {string[]} [properties.optionalArray] Description for identify optionalArray
     * @param {number} properties.requiredNumber Description for identify requiredNumber
   * @param {IdentifyOptions} [options] Optional event options.
   * @param {MiddlewareExtra} [extra] Extra unstructured data for middleware.
   */
  identify(userId, deviceId, properties, options, extra) {
    const event = {
      event_type: SpecialEventType.Identify,
      event_properties: properties,
      user_id: userId,
      device_id: deviceId
    };
    this.runMiddleware({ event, extra }, payload => {
      if (userId) {
        this.amplitude.setUserId(userId);
      }
      if (deviceId) {
        this.amplitude.setDeviceId(deviceId);
      }
      const amplitudeIdentify = new AmplitudeIdentify();
      for (const [key, value] of Object.entries({ ...payload.event.event_properties })) {
        amplitudeIdentify.set(key, value);
      }
      this.amplitude.identify(
        amplitudeIdentify,
        options?.callback,
        options?.errorCallback
      );
    });
  }


  /**
   * Track event
   *
   * @param {BaseEvent} event The event to track.
   * @param {EventOptions} [options] Optional event options.
   * @param {MiddlewareExtra} [extra] Extra unstructured data for middleware.
   */
  track(event, options, extra) {
    this.runMiddleware({ event, extra }, payload => {
      this.amplitude.logEvent(
        payload.event.event_type,
        payload.event.event_properties,
        options?.callback,
        options?.errorCallback,
      );
    });
  }

  /**
   * EventMaxIntForTest
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/EventMaxIntForTest)
   *
   * Event to test schema validation
   * 
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {number} properties.intMax10 property to test schema validation
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventMaxIntForTest(properties, options, extra) {
    this.track(new EventMaxIntForTest(properties), options, extra);
  }

  /**
   * EventNoProperties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20No%20Properties)
   *
   * Event w no properties description
   * 
   * Owner: Test codegen
   *
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventNoProperties(options, extra) {
    this.track(new EventNoProperties(), options, extra);
  }

  /**
   * EventObjectTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20Object%20Types)
   *
   * Event with Object and Object Array
   * 
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {Object[]} properties.requiredObjectArray Property Object Array Type
   * @param {Object} properties.requiredObject Property Object Type
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventObjectTypes(properties, options, extra) {
    this.track(new EventObjectTypes(properties), options, extra);
  }

  /**
   * EventWithAllProperties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20All%20Properties)
   *
   * Event w all properties description
   * 
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {number} properties.requiredInteger Event 2 Property - Integer    *     * Examples:    * 5, 4, 3
   * @param {string} [properties.optionalString] Event 2 Property - Optional String    *     * Examples:    * Some string, or another
   * @param {string} properties.requiredEnum Event 2 Property - Enum
   * @param {string[]} properties.requiredArray Event 2 Property - Array
   * @param {boolean} properties.requiredBoolean Event 2 Property - Boolean
   * @param {number} properties.requiredNumber Event 2 Property - Number
   * @param {string} properties.requiredString Event 2 Property - String
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithAllProperties(properties, options, extra) {
    this.track(new EventWithAllProperties(properties), options, extra);
  }

  /**
   * EventWithArrayTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Array%20Types)
   *
   * Description for event with Array Types
   * 
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {Object[]} properties.requiredObjectArray Description for required object array
   * @param {string[]} properties.requiredStringArray description for required string array
   * @param {number[]} properties.requiredNumberArray Description for required number array
   * @param {boolean[]} properties.requiredBooleanArray description for required boolean array
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithArrayTypes(properties, options, extra) {
    this.track(new EventWithArrayTypes(properties), options, extra);
  }

  /**
   * EventWithConstTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Const%20Types)
   *
   * Description for event with const types
   * 
   * Owner: Test codegen
   *
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithConstTypes(options, extra) {
    this.track(new EventWithConstTypes(), options, extra);
  }

  /**
   * EventWithDifferent_CasingTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/event%20withDifferent_CasingTypes)
   *
   * Description for case with space
   * 
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {string} properties.EnumPascalCase DescirptionForEnumPascalCase
   * @param {string} properties.enum_snake_case description_for_enum_snake_case
   * @param {string} properties.enum with space Description for enum with space
   * @param {string} properties.PropertyWithPascalCase DescriptionForPascalCase
   * @param {string} properties.enumCamelCase descriptionForEnumCamelCase
   * @param {string} properties.propertyWithCamelCase descriptionForCamelCase
   * @param {string} properties.property_with_snake_case Description_for_snake_case
   * @param {string} properties.property with space Description for case with space
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithDifferentCasingTypes(properties, options, extra) {
    this.track(new EventWithDifferentCasingTypes(properties), options, extra);
  }

  /**
   * EventWithEnumTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Enum%20Types)
   *
   * Description for event with enum types
   * 
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {string} [properties.optional enum] Description for required enum
   * @param {string} properties.required enum Description for optional enum
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithEnumTypes(properties, options, extra) {
    this.track(new EventWithEnumTypes(properties), options, extra);
  }

  /**
   * EventWithOptionalArrayTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Optional%20Array%20Types)
   *
   * Description for event with optional array types
   * 
   * Owner: Test codegen
   *
   * @param {Object} [properties] The event's properties.
   * @param {Object[]} [properties.optionalJSONArray] Description for optional object array
   * @param {string[]} [properties.optionalStringArray] Description for optional string array
   * @param {number[]} [properties.optionalNumberArray] Description for optional number array
   * @param {boolean[]} [properties.optionalBooleanArray] Description for optional boolean array
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithOptionalArrayTypes(properties, options, extra) {
    this.track(new EventWithOptionalArrayTypes(properties), options, extra);
  }

  /**
   * EventWithOptionalProperties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Optional%20Properties)
   *
   * Event w optional properties description
   * 
   * Owner: Test codegen
   *
   * @param {Object} [properties] The event's properties.
   * @param {number[]} [properties.optionalArrayNumber] Property has no description in tracking plan.
   * @param {string[]} [properties.optionalArrayString] Property has no description in tracking plan.
   * @param {number} [properties.optionalNumber] Property has no description in tracking plan.
   * @param {boolean} [properties.optionalBoolean] Property has no description in tracking plan.
   * @param {string} [properties.optionalString] Optional String property description
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   */
  eventWithOptionalProperties(properties, options, extra) {
    this.track(new EventWithOptionalProperties(properties), options, extra);
  }
  
  /**
   * Add new middleware to end of chain
   * 
   * @param {Middleware} middleware
   */
  addEventMiddleware(middleware) {
    this.middlewares.push(middleware);
  }
  
  /**
   * Runs all middleware
   * 
   * @param {MiddlewarePayload} payload
   * @param {MiddlewareNext} next The method to run after all middleware.
   * 
   * @protected
   */
  runMiddleware(payload, next) {
    let curMiddlewareIndex = -1;
    const middlewareCount = this.middlewares.length;
    
    const middlewareNext = curPayload => {
      curMiddlewareIndex += 1;
      if (curMiddlewareIndex < middlewareCount) {
        this.middlewares[curMiddlewareIndex](curPayload, _next);
      } else {
        next(curPayload);
      }
    };

    const _next = middlewareCount > 0 ? middlewareNext : next;

    _next(payload);
  }
}

export const DefaultInstance = Environment.development;
/**
* @type {Object.<string, {Ampli}> }
* @private
*/
const _instances = {};

/**
 * Get an Ampli instance
 *
 * @param {(Environment.development|Environment.production|string)} [instance] The Environment or name of the desired instance.
 * @param {Config} [config] Amplitude configuration options.
 * @param {string} [apiKey] An Amplitude API key.
 *
 * @return {Ampli}
 */
export function getInstance(instance = DefaultInstance, config = DefaultConfig, apiKey) {
  let ampli = _instances[instance];
  if (!ampli) {
    const key = apiKey || ApiKey[instance];
    if (key === undefined || key === '') {
      throw new Error(`No API key or instance found for '${instance}'. Provide a valid environment or call Ampli.setInstance('${instance}', ...) before making this call.`);
    }
    const amplitudeClient = amplitude.getInstance(instance);
    amplitudeClient.init(key, undefined, config);
    ampli = new Ampli(amplitudeClient);
    setInstance(ampli, instance);
  }
  return ampli;
}

/**
 * Stores and instance of Ampli for later retrieval via getInstance()
 *
 * @param {Ampli} ampli The Ampli instance
 * @param {(Environment.development|Environment.production|string)} instance  The Environment or name of this instance
 */
export function setInstance(ampli, instance = DefaultInstance) {
  _instances[instance] = ampli;
}
