/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull swift-ampli'
 *
 * Required dependencies: Amplitude-iOS^8.6.0
 * Tracking Plan Version: 0
 * Build: 1.0.0
 *
 * [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/swift-ampli)
 */

import Foundation
import Amplitude

public typealias MiddlewareExtra = [String: Any]

public enum AmpliEnvironment: Int {
  case development,production;
}

let ApiKey: [AmpliEnvironment: String] = [
  .development:"00aa083ba31d20782808820370c15a71",
  .production:"af568af728fe7ecab9800979089ad112"
];

let AmpliObservePlan = AMPPlan()
                      .setBranch("main")
                      .setSource("swift-ampli")
                      .setVersion("0");

public class Event {
  var eventType: String
  var eventProperties: [String:Any]?

  init(eventType: String, eventProperties: [String:Any]?) {
      self.eventType = eventType;
      self.eventProperties = eventProperties;
  }
}

// This file was generated from JSON Schema using quicktype, do not modify it directly.
// To parse the JSON, add this file to your project and do:
//
//   let eventProperties = try EventProperties(json)

import Foundation

// MARK: - EventProperties
public struct EventProperties {
    public let context: ContextProperties?
    public let eventMaxIntForTest: EventMaxIntForTestProperties?
    public let eventNoProperties: EventNoPropertiesProperties?
    public let eventObjectTypes: EventObjectTypesProperties?
    public let eventWithAllProperties: EventWithAllPropertiesProperties?
    public let eventWithArrayTypes: EventWithArrayTypesProperties?
    public let eventWithConstTypes: EventWithConstTypesProperties?
    public let eventWithDifferentCasingTypes: EventWithDifferentCasingTypesProperties?
    public let eventWithEnumTypes: EventWithEnumTypesProperties?
    public let eventWithOptionalArrayTypes: EventWithOptionalArrayTypesProperties?
    public let eventWithOptionalProperties: EventWithOptionalPropertiesProperties?
    public let group: GroupProperties?
    public let identify: IdentifyProperties?

    public init(context: ContextProperties?, eventMaxIntForTest: EventMaxIntForTestProperties?, eventNoProperties: EventNoPropertiesProperties?, eventObjectTypes: EventObjectTypesProperties?, eventWithAllProperties: EventWithAllPropertiesProperties?, eventWithArrayTypes: EventWithArrayTypesProperties?, eventWithConstTypes: EventWithConstTypesProperties?, eventWithDifferentCasingTypes: EventWithDifferentCasingTypesProperties?, eventWithEnumTypes: EventWithEnumTypesProperties?, eventWithOptionalArrayTypes: EventWithOptionalArrayTypesProperties?, eventWithOptionalProperties: EventWithOptionalPropertiesProperties?, group: GroupProperties?, identify: IdentifyProperties?) {
        self.context = context
        self.eventMaxIntForTest = eventMaxIntForTest
        self.eventNoProperties = eventNoProperties
        self.eventObjectTypes = eventObjectTypes
        self.eventWithAllProperties = eventWithAllProperties
        self.eventWithArrayTypes = eventWithArrayTypes
        self.eventWithConstTypes = eventWithConstTypes
        self.eventWithDifferentCasingTypes = eventWithDifferentCasingTypes
        self.eventWithEnumTypes = eventWithEnumTypes
        self.eventWithOptionalArrayTypes = eventWithOptionalArrayTypes
        self.eventWithOptionalProperties = eventWithOptionalProperties
        self.group = group
        self.identify = identify
    }
}

// MARK: - ContextProperties
public struct ContextProperties {

    public init() {
    }
}

/// Event to test schema validation
// MARK: - EventMaxIntForTestProperties
public struct EventMaxIntForTestProperties {
    /// property to test schema validation
    public let intMax10: Int

    public init(intMax10: Int) {
        self.intMax10 = intMax10
    }
}

/// Event w no properties description
// MARK: - EventNoPropertiesProperties
public struct EventNoPropertiesProperties {

    public init() {
    }
}

/// Event with Object and Object Array
// MARK: - EventObjectTypesProperties
public struct EventObjectTypesProperties {
    /// Property Object Type
    public let requiredObject: [String: Any?]
    /// Property Object Array Type
    public let requiredObjectArray: [[String: Any?]]

    public init(requiredObject: [String: Any?], requiredObjectArray: [[String: Any?]]) {
        self.requiredObject = requiredObject
        self.requiredObjectArray = requiredObjectArray
    }
}

/// Event w all properties description
// MARK: - EventWithAllPropertiesProperties
public struct EventWithAllPropertiesProperties {
    /// Event 2 Property - Optional String    *     * Examples:    * Some string, or another
    public let optionalString: String?
    /// Event 2 Property - Array
    public let requiredArray: [String]
    /// Event 2 Property - Boolean
    public let requiredBoolean: Bool
    /// Event 2 Property - Enum
    public let requiredEnum: RequiredEnum
    /// Event 2 Property - Integer    *     * Examples:    * 5, 4, 3
    public let requiredInteger: Int
    /// Event 2 Property - Number
    public let requiredNumber: Double
    /// Event 2 Property - String
    public let requiredString: String

    public init(optionalString: String?, requiredArray: [String], requiredBoolean: Bool, requiredEnum: RequiredEnum, requiredInteger: Int, requiredNumber: Double, requiredString: String) {
        self.optionalString = optionalString
        self.requiredArray = requiredArray
        self.requiredBoolean = requiredBoolean
        self.requiredEnum = requiredEnum
        self.requiredInteger = requiredInteger
        self.requiredNumber = requiredNumber
        self.requiredString = requiredString
    }
}

/// Event 2 Property - Enum
public enum RequiredEnum {
    case enum1
    case enum2
}

/// Description for event with Array Types
// MARK: - EventWithArrayTypesProperties
public struct EventWithArrayTypesProperties {
    /// description for required boolean array
    public let requiredBooleanArray: [Bool]
    /// Description for required number array
    public let requiredNumberArray: [Double]
    /// Description for required object array
    public let requiredObjectArray: [[String: Any?]]
    /// description for required string array
    public let requiredStringArray: [String]

    public init(requiredBooleanArray: [Bool], requiredNumberArray: [Double], requiredObjectArray: [[String: Any?]], requiredStringArray: [String]) {
        self.requiredBooleanArray = requiredBooleanArray
        self.requiredNumberArray = requiredNumberArray
        self.requiredObjectArray = requiredObjectArray
        self.requiredStringArray = requiredStringArray
    }
}

/// Description for event with const types
// MARK: - EventWithConstTypesProperties
public struct EventWithConstTypesProperties {

    public init() {
    }
}

/// Description for case with space
// MARK: - EventWithDifferentCasingTypesProperties
public struct EventWithDifferentCasingTypesProperties {
    /// Description for enum with space
    public let enumWithSpace: EnumWithSpace
    /// description_for_enum_snake_case
    public let enumSnakeCase: EnumSnakeCase
    /// descriptionForEnumCamelCase
    public let enumCamelCase: EnumCamelCase
    /// DescirptionForEnumPascalCase
    public let enumPascalCase: EnumPascalCase
    /// Description for case with space
    public let propertyWithSpace: String
    /// Description_for_snake_case
    public let propertyWithSnakeCase: String
    /// descriptionForCamelCase
    public let propertyWithCamelCase: String
    /// DescriptionForPascalCase
    public let propertyWithPascalCase: String

    public init(enumWithSpace: EnumWithSpace, enumSnakeCase: EnumSnakeCase, enumCamelCase: EnumCamelCase, enumPascalCase: EnumPascalCase, propertyWithSpace: String, propertyWithSnakeCase: String, propertyWithCamelCase: String, propertyWithPascalCase: String) {
        self.enumWithSpace = enumWithSpace
        self.enumSnakeCase = enumSnakeCase
        self.enumCamelCase = enumCamelCase
        self.enumPascalCase = enumPascalCase
        self.propertyWithSpace = propertyWithSpace
        self.propertyWithSnakeCase = propertyWithSnakeCase
        self.propertyWithCamelCase = propertyWithCamelCase
        self.propertyWithPascalCase = propertyWithPascalCase
    }
}

/// descriptionForEnumCamelCase
public enum EnumCamelCase {
    case enumCamelCase
}

/// DescirptionForEnumPascalCase
public enum EnumPascalCase {
    case enumPascalCase
}

/// description_for_enum_snake_case
public enum EnumSnakeCase {
    case enumSnakeCase
}

/// Description for enum with space
public enum EnumWithSpace {
    case enumWithSpace
}

/// Description for event with enum types
// MARK: - EventWithEnumTypesProperties
public struct EventWithEnumTypesProperties {
    /// Description for required enum
    public let optionalEnum: OptionalEnum?
    /// Description for optional enum
    public let requiredEnum: RequiredEnumEnum

    public init(optionalEnum: OptionalEnum?, requiredEnum: RequiredEnumEnum) {
        self.optionalEnum = optionalEnum
        self.requiredEnum = requiredEnum
    }
}

/// Description for required enum
public enum OptionalEnum {
    case optionalEnum1
    case optionalEnum2
}

/// Description for optional enum
public enum RequiredEnumEnum {
    case requiredEnum1
    case requiredEnum2
}

/// Description for event with optional array types
// MARK: - EventWithOptionalArrayTypesProperties
public struct EventWithOptionalArrayTypesProperties {
    /// Description for optional boolean array
    public let optionalBooleanArray: [Bool]?
    /// Description for optional object array
    public let optionalJsonArray: [[String: Any?]]?
    /// Description for optional number array
    public let optionalNumberArray: [Double]?
    /// Description for optional string array
    public let optionalStringArray: [String]?

    public init(optionalBooleanArray: [Bool]?, optionalJsonArray: [[String: Any?]]?, optionalNumberArray: [Double]?, optionalStringArray: [String]?) {
        self.optionalBooleanArray = optionalBooleanArray
        self.optionalJsonArray = optionalJsonArray
        self.optionalNumberArray = optionalNumberArray
        self.optionalStringArray = optionalStringArray
    }
}

/// Event w optional properties description
// MARK: - EventWithOptionalPropertiesProperties
public struct EventWithOptionalPropertiesProperties {
    public let optionalArrayNumber: [Double]?
    public let optionalArrayString: [String]?
    public let optionalBoolean: Bool?
    public let optionalNumber: Double?
    /// Optional String property description
    public let optionalString: String?

    public init(optionalArrayNumber: [Double]?, optionalArrayString: [String]?, optionalBoolean: Bool?, optionalNumber: Double?, optionalString: String?) {
        self.optionalArrayNumber = optionalArrayNumber
        self.optionalArrayString = optionalArrayString
        self.optionalBoolean = optionalBoolean
        self.optionalNumber = optionalNumber
        self.optionalString = optionalString
    }
}

// MARK: - GroupProperties
public struct GroupProperties {
    /// Description for group optionalString
    public let optionalString: String?
    /// Description for group requiredBoolean
    public let requiredBoolean: Bool

    public init(optionalString: String?, requiredBoolean: Bool) {
        self.optionalString = optionalString
        self.requiredBoolean = requiredBoolean
    }
}

// MARK: - IdentifyProperties
public struct IdentifyProperties {
    /// Description for identify optionalArray
    public let optionalArray: [String]?
    /// Description for identify requiredNumber
    public let requiredNumber: Double

    public init(optionalArray: [String]?, requiredNumber: Double) {
        self.optionalArray = optionalArray
        self.requiredNumber = requiredNumber
    }
}

public class Context : Event {
  init() {
    super.init(
      eventType: "Context",
      eventProperties: nil
    );
  }
}

public class Identify : Event {
  init(
    eventProperties: IdentifyProperties
  ) {
    let propertyDict: [String: Any] = [
      "optionalArray": eventProperties.optionalArray as Any,
      "requiredNumber": eventProperties.requiredNumber
    ];
    super.init(
      eventType: "Identify",
      eventProperties: propertyDict
    );
  }
}

public class Group : Event {
  init(
    eventProperties: GroupProperties
  ) {
    let propertyDict: [String: Any] = [
      "requiredBoolean": eventProperties.requiredBoolean,
      "optionalString": eventProperties.optionalString as Any
    ];
    super.init(
      eventType: "Group",
      eventProperties: propertyDict
    );
  }
}

public class EventMaxIntForTest : Event {
  init(
    eventProperties: EventMaxIntForTestProperties
  ) {
    let propertyDict: [String: Any] = [
      "intMax10": eventProperties.intMax10
    ];
    super.init(
      eventType: "EventMaxIntForTest",
      eventProperties: propertyDict
    );
  }
}

public class EventNoProperties : Event {
  init() {
    super.init(
      eventType: "Event No Properties",
      eventProperties: nil
    );
  }
}

public class EventObjectTypes : Event {
  init(
    eventProperties: EventObjectTypesProperties
  ) {
    let propertyDict: [String: Any] = [
      "requiredObjectArray": eventProperties.requiredObjectArray,
      "requiredObject": eventProperties.requiredObject
    ];
    super.init(
      eventType: "Event Object Types",
      eventProperties: propertyDict
    );
  }
}

public class EventWithAllProperties : Event {
  init(
    eventProperties: EventWithAllPropertiesProperties
  ) {
    let propertyDict: [String: Any] = [
      "requiredConst": "some-const-value",

      "requiredInteger": eventProperties.requiredInteger,
      "optionalString": eventProperties.optionalString as Any,
      "requiredEnum": eventProperties.requiredEnum,
      "requiredArray": eventProperties.requiredArray,
      "requiredBoolean": eventProperties.requiredBoolean,
      "requiredNumber": eventProperties.requiredNumber,
      "requiredString": eventProperties.requiredString
    ];
    super.init(
      eventType: "Event With All Properties",
      eventProperties: propertyDict
    );
  }
}

public class EventWithArrayTypes : Event {
  init(
    eventProperties: EventWithArrayTypesProperties
  ) {
    let propertyDict: [String: Any] = [
      "requiredObjectArray": eventProperties.requiredObjectArray,
      "requiredStringArray": eventProperties.requiredStringArray,
      "requiredNumberArray": eventProperties.requiredNumberArray,
      "requiredBooleanArray": eventProperties.requiredBooleanArray
    ];
    super.init(
      eventType: "Event With Array Types",
      eventProperties: propertyDict
    );
  }
}

public class EventWithConstTypes : Event {
  init() {
    let propertyDict: [String: Any] = [
      "String Const WIth Quotes": "\"String \"Const With\" Quotes\"",
      "String Const": "String-Constant",
      "String Int Const": 0,
      "Integer Const": 10,
      "Boolean Const": true,
      "Number Const": 2.2
    ];
    super.init(
      eventType: "Event With Const Types",
      eventProperties: propertyDict
    );
  }
}

public class EventWithDifferentCasingTypes : Event {
  init(
    eventProperties: EventWithDifferentCasingTypesProperties
  ) {
    let propertyDict: [String: Any] = [
      "EnumPascalCase": eventProperties.enumPascalCase,
      "enum_snake_case": eventProperties.enumSnakeCase,
      "enum with space": eventProperties.enumWithSpace,
      "PropertyWithPascalCase": eventProperties.propertyWithPascalCase,
      "enumCamelCase": eventProperties.enumCamelCase,
      "propertyWithCamelCase": eventProperties.propertyWithCamelCase,
      "property_with_snake_case": eventProperties.propertyWithSnakeCase,
      "property with space": eventProperties.propertyWithSpace
    ];
    super.init(
      eventType: "event withDifferent_CasingTypes",
      eventProperties: propertyDict
    );
  }
}

public class EventWithEnumTypes : Event {
  init(
    eventProperties: EventWithEnumTypesProperties
  ) {
    let propertyDict: [String: Any] = [
      "optional enum": eventProperties.optionalEnum as Any,
      "required enum": eventProperties.requiredEnum
    ];
    super.init(
      eventType: "Event With Enum Types",
      eventProperties: propertyDict
    );
  }
}

public class EventWithOptionalArrayTypes : Event {
  init(
    eventProperties: EventWithOptionalArrayTypesProperties
  ) {
    let propertyDict: [String: Any] = [
      "optionalJSONArray": eventProperties.optionalJsonArray as Any,
      "optionalStringArray": eventProperties.optionalStringArray as Any,
      "optionalNumberArray": eventProperties.optionalNumberArray as Any,
      "optionalBooleanArray": eventProperties.optionalBooleanArray as Any
    ];
    super.init(
      eventType: "Event With Optional Array Types",
      eventProperties: propertyDict
    );
  }
}

public class EventWithOptionalProperties : Event {
  init(
    eventProperties: EventWithOptionalPropertiesProperties
  ) {
    let propertyDict: [String: Any] = [
      "optionalArrayNumber": eventProperties.optionalArrayNumber as Any,
      "optionalArrayString": eventProperties.optionalArrayString as Any,
      "optionalNumber": eventProperties.optionalNumber as Any,
      "optionalBoolean": eventProperties.optionalBoolean as Any,
      "optionalString": eventProperties.optionalString as Any
    ];
    super.init(
      eventType: "Event With Optional Properties",
      eventProperties: propertyDict
    );
  }
}
public struct LoadClientOptions {
  let apiKey: String?
  let instance: Amplitude?

    init(apiKey: String? = nil, instance: Amplitude? = nil) {
        self.apiKey = apiKey
        self.instance = instance
    }
}

public struct LoadOptions {
  let environment: AmpliEnvironment?
  let disabled: Bool?
  let client: LoadClientOptions?

  init(environment: AmpliEnvironment? = nil, disabled: Bool? = nil, client: LoadClientOptions? = nil) {
    self.environment = environment
    self.disabled = disabled
    self.client = client
  }
}

public class Ampli {
  private var amplitude: Amplitude?;
  private var disabled: Bool;

  init() {
      disabled = false;
  }

  public func load(options: LoadOptions? = nil) -> Void {
    self.disabled = options?.disabled ?? false;
    let env = options?.environment ?? AmpliEnvironment.development;
    let apiKey = options?.client?.apiKey ?? ApiKey[env];

    if (options?.client?.instance != nil) {
        self.amplitude = options?.client?.instance;
    } else if (apiKey != nil) {
        self.amplitude = Amplitude.instance();
        self.amplitude?.initializeApiKey(apiKey!);
    }

    self.amplitude?.setPlan(AmpliObservePlan!);
}

  public func track(event: Event, extra: MiddlewareExtra?) -> Void {
    if (!isInitializedAndEnabld()) {
        return;
    }
    amplitude?.logEvent(event.eventType, withEventProperties: event.eventProperties, withMiddlewareExtra: extra as? NSMutableDictionary);
  }

  public func identify(userId: String?, deviceId: String?, properties: IdentifyProperties?, extra: MiddlewareExtra?) -> Void {
      if (!isInitializedAndEnabld()) {
          return;
      }
      if (userId != nil) {
          amplitude?.setUserId(userId);
      }
      if (deviceId != nil) {
          amplitude?.setDeviceId(deviceId!);
      }
      let identifyArgs = AMPIdentify()
      objectToDictionary(propertyObj: properties).forEach{ key, value in
          identifyArgs.set(key, value: value as? NSObject)
      }

      amplitude?.identify(identifyArgs)
  }

  public func flush() -> Void {
      if (!isInitializedAndEnabld()) {
          return;
      }
      amplitude?.uploadEvents();
  }

  /**
  EventMaxIntForTest

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/EventMaxIntForTest)

  Event to test schema validation

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventMaxIntForTest(properties: EventMaxIntForTestProperties, extra: MiddlewareExtra?) {
      self.track(event: EventMaxIntForTest(eventProperties: properties), extra: extra);
  }

  /**
  Event No Properties

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20No%20Properties)

  Event w no properties description

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventNoProperties(extra: MiddlewareExtra?) {
      self.track(event: EventNoProperties(), extra: extra);
  }

  /**
  Event Object Types

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20Object%20Types)

  Event with Object and Object Array

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventObjectTypes(properties: EventObjectTypesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventObjectTypes(eventProperties: properties), extra: extra);
  }

  /**
  Event With All Properties

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20All%20Properties)

  Event w all properties description

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithAllProperties(properties: EventWithAllPropertiesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventWithAllProperties(eventProperties: properties), extra: extra);
  }

  /**
  Event With Array Types

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Array%20Types)

  Description for event with Array Types

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithArrayTypes(properties: EventWithArrayTypesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventWithArrayTypes(eventProperties: properties), extra: extra);
  }

  /**
  Event With Const Types

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Const%20Types)

  Description for event with const types

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithConstTypes(extra: MiddlewareExtra?) {
      self.track(event: EventWithConstTypes(), extra: extra);
  }

  /**
  event withDifferent_CasingTypes

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/event%20withDifferent_CasingTypes)

  Description for case with space

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithDifferentCasingTypes(properties: EventWithDifferentCasingTypesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventWithDifferentCasingTypes(eventProperties: properties), extra: extra);
  }

  /**
  Event With Enum Types

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Enum%20Types)

  Description for event with enum types

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithEnumTypes(properties: EventWithEnumTypesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventWithEnumTypes(eventProperties: properties), extra: extra);
  }

  /**
  Event With Optional Array Types

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Optional%20Array%20Types)

  Description for event with optional array types

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithOptionalArrayTypes(properties: EventWithOptionalArrayTypesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventWithOptionalArrayTypes(eventProperties: properties), extra: extra);
  }

  /**
  Event With Optional Properties

  [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Optional%20Properties)

  Event w optional properties description

  Owner: Test codegen

  - Parameter userId The user's ID.
  - Parameter properties The event's properties
  - Parameter extra Extra untyped parameters for use in middleware.
  */
  public func eventWithOptionalProperties(properties: EventWithOptionalPropertiesProperties, extra: MiddlewareExtra?) {
      self.track(event: EventWithOptionalProperties(eventProperties: properties), extra: extra);
  }
  private func isInitializedAndEnabld() -> Bool {
    if (self.amplitude == nil) {
        NSLog("Ampli is not yet initialized. Have you called `ampli.load()` on app start?");
        return false;
    }
    return !self.disabled;
  }

  private func objectToDictionary(propertyObj: Any?) -> [String: Any] {
      var dictionary = [String: Any]();
      if (propertyObj == nil) {
          return dictionary;
      }
      let mirror = Mirror(reflecting: propertyObj!);
      for (key, value) in mirror.children {
          if let key = key {
              dictionary[key] = value;
          }
      }
      return dictionary
  }
}
