//
// Ampli - A strong typed wrapper for your Analytics
//
// This file is generated by Amplitude.
// To update run 'ampli pull java-ampli-v2'
//
// Required dependencies: com.amplitude:analytics-android:0.1.0-beta.8
// Tracking Plan Version: 0
// Build: 1.0.0
// Runtime: android:java-ampli-v2
//
// [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
//
// [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/java-ampli-v2)
//
package com.amplitude.ampli;

import java.util.HashMap;
import com.amplitude.android.events.BaseEvent;

public class EventWithEnumTypes extends BaseEvent {
    public enum OptionalEnum {
        OPTIONAL_ENUM_1("optional enum 1"), OPTIONAL_ENUM_2("optional enum 2");

        private final String value;

        public String getValue()
        {
            return this.value;
        }

        OptionalEnum(String value)
        {
            this.value = value;
        }
    }

    public enum RequiredEnum {
        REQUIRED_ENUM_1("required enum 1"), REQUIRED_ENUM_2("required enum 2");

        private final String value;

        public String getValue()
        {
            return this.value;
        }

        RequiredEnum(String value)
        {
            this.value = value;
        }
    }

    private EventWithEnumTypes(Builder builder) {
        eventType = "Event With Enum Types";
        setEventProperties(builder.properties);
    }

    public static IRequiredEnum builder() { return new Builder(); }

    // Inner Builder class with required properties
    public static class Builder implements IRequiredEnum, IBuild {
        private final HashMap<String, Object> properties = new HashMap<>();

        private Builder() {

        }

        /**
         * Description for optional enum
         * <p>
         * Must be followed by by additional optional properties or build() method
         */
        public IBuild requiredEnum(RequiredEnum requiredEnum) {
            this.properties.put("required enum", requiredEnum.getValue());
            return this;
        }

        /**
         * Description for required enum
         */
        public IBuild optionalEnum(OptionalEnum optionalEnum) {
            this.properties.put("optional enum", optionalEnum.getValue());
            return this;
        }

        public EventWithEnumTypes build() {
            return new EventWithEnumTypes(this);
        }
    }

    // Required property interfaces
    public interface IRequiredEnum {
        IBuild requiredEnum(RequiredEnum requiredEnum);
    }

    /** Build interface with optional properties */
    public interface IBuild {
        IBuild optionalEnum(OptionalEnum optionalEnum);
        EventWithEnumTypes build();
    }
}
