/* tslint:disable */
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull react-native-javascript-ampli'
 *
 * Required dependencies: @amplitude/react-native
 * Tracking Plan Version: 0
 * Build: 1.0.0
 * Runtime: react-native:javascript-ampli
 *
 * [View Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/test-codegen/Test%20Codegen/implementation/react-native-javascript-ampli)
 */

import {
  Amplitude,
  Identify as AmplitudeIdentify,
  BaseEvent as Event,
  MiddlewareExtra,
} from '@amplitude/react-native';

/**
 * @typedef LoadClientOptions
 * @type {object}
 * @property {string} [apiKey]
 * @property {Amplitude} [instance]
 */

/**
 * @typedef LoadOptions
 * @type {object}
 * @property {'development'|'production'} [environment]
 * @property {boolean} [disabled]
 * @property {LoadClientOptions} [client]
 */

/**
 * @typedef {Object} EventOptions
 * @type {object}
 * @property {string} [userId]
 * @property {string} [deviceId]
 */

/**
 * @typedef ApiKey
 * @type {object}
 * @property {string} development
 * @property {string} production
 */
export const ApiKey = {
  development: '',
  production: ''
};

/**
 * @typedef {Object} EventTemplate
 * @param {number} [optional_template_property] optional_template_property description
 * @param {string} required_template_property required_template_property description
 */

/**
 * @typedef {Object} SourceTemplate
 * @param {'Value 1'|'Value 2'} [optionalEnum] description for context optionalEnum
 * @param {string} requiredString description for context requiredString
 */

export class Identify {
  constructor(properties) {
    this.eventType = 'Identify';
    this.eventProperties = properties;
  }
}

export class Group {
  constructor(properties) {
    this.eventType = 'Group';
    this.eventProperties = properties;
  }
}

export class EventMaxIntForTest {
  constructor(properties) {
    this.eventType = 'EventMaxIntForTest';
    this.eventProperties = properties;
  }
}

export class EventNoProperties {
  constructor() {
    this.eventType = 'Event No Properties';
  }
}

export class EventObjectTypes {
  constructor(properties) {
    this.eventType = 'Event Object Types';
    this.eventProperties = properties;
  }
}

export class EventWithAllProperties {
  constructor(properties) {
    this.eventType = 'Event With All Properties';
    this.eventProperties = {
      ...properties,
      'requiredConst': "some-const-value",
    };
  }
}

export class EventWithArrayTypes {
  constructor(properties) {
    this.eventType = 'Event With Array Types';
    this.eventProperties = properties;
  }
}

export class EventWithConstTypes {
  constructor() {
    this.eventType = 'Event With Const Types';
    this.eventProperties = {
      'Boolean Const': true,
      'Integer Const': 10,
      'Number Const': 2.2,
      'String Const': "String-Constant",
      'String Const WIth Quotes': "\"String \"Const With\" Quotes\"",
      'String Int Const': 0,
    };
  }
}

export class EventWithDifferentCasingTypes {
  constructor(properties) {
    this.eventType = 'event withDifferent_CasingTypes';
    this.eventProperties = properties;
  }
}

export class EventWithEnumTypes {
  constructor(properties) {
    this.eventType = 'Event With Enum Types';
    this.eventProperties = properties;
  }
}

export class EventWithOptionalArrayTypes {
  constructor(properties) {
    this.eventType = 'Event With Optional Array Types';
    this.eventProperties = properties;
  }
}

export class EventWithOptionalProperties {
  constructor(properties) {
    this.eventType = 'Event With Optional Properties';
    this.eventProperties = properties;
  }
}

export class EventWithTemplateProperties {
  constructor(properties) {
    this.eventType = 'Event With Template Properties';
    this.eventProperties = properties;
  }
}

const getPromiseResponse = result => Promise.resolve(result);

// prettier-ignore
export class Ampli {
  constructor() {
    /* @type {Amplitude|undefined} */
    this.amplitude = undefined;
    this.disabled = false;
  }

  /**
   * @return {Amplitude}
   */
  get client() {
    this.isInitializedAndEnabled();
    return this.amplitude;
  }

  /**
   * @private
   * @return {boolean}
   */
  isInitializedAndEnabled() {
    if (!this.amplitude) {
      throw new Error('Ampli is not yet initialized. Have you called ampli.load() on app start?');
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   * @param {LoadOptions} [options] Configuration options to initialize the Ampli SDK with.
   */
  load(options) {
    this.disabled = options?.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return { promise: getPromiseResponse(false) };
    }

    const env = options?.environment ?? 'development';
    const apiKey = options?.client?.apiKey ?? ApiKey[env];

    if (options?.client?.instance) {
      this.amplitude = options?.client?.instance;
      return { promise: getPromiseResponse(true) };
    }

    if (apiKey) {
      this.amplitude = Amplitude.getInstance();
      const promise = this.amplitude.init(apiKey);
      return { promise };
    }

    throw new Error("ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
  }

  /**
   * Identify a user and set or update that user's properties.
   *
   * @param {string|undefined} userId The user's id.
   * @param {Object} properties The user's properties.
   * @param {string[]} [properties.optionalArray] Description for identify optionalArray
   * @param {number} properties.requiredNumber Description for identify requiredNumber
   * @param {EventOptions} [options] Optional event options.
   * @param {MiddlewareExtra} [extra] Extra unstructured data for middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  identify(userId, properties, options, extra) {
    if (!this.isInitializedAndEnabled()) {
      return { promise: getPromiseResponse(false) };
    }

    this.handleEventOptions(options, userId);

    const amplitudeIdentify = new AmplitudeIdentify();
    if (properties != null) {
      for (const [key, value] of Object.entries(properties)) {
        amplitudeIdentify.set(key, value);
      }
    }

    const promise = this.amplitude.identify(amplitudeIdentify, extra);
    return { promise };
  }

  /**
   * Set Group for the current user
   *
   * @param {String} groupType
   * @param {String|String[]} groupName
   * @param {EventOptions} [options]
   * @param {MiddlewareExtra} [extra]
   *
   * @return {{promise: Promise<boolean>}}
   */
  setGroup(groupType, groupName, options, extra) {
    if (!this.isInitializedAndEnabled()) {
      return { promise: getPromiseResponse(false) };
    }

    this.handleEventOptions(options);

    const promise = this.amplitude.setGroup(groupType, groupName);
    return { promise };
  }

  /**
   * Identify a group and set or update that group's properties.
   *
   * @param {string} groupType The group type.
   * @param {string|string[]} groupName The group name.
   * @param {Object} properties The group's properties.
   * @param {string} [properties.optionalString] Description for group optionalString
   * @param {boolean} properties.requiredBoolean Description for group requiredBoolean
   * @param {EventOptions} [options] Options for this groupIdentify call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  groupIdentify(groupType, groupName, properties, options, extra) {
    if (!this.isInitializedAndEnabled()) {
      return { promise: getPromiseResponse(false) };
    }

    this.handleEventOptions(options);

    const amplitudeIdentify = new AmplitudeIdentify();
    if (properties != null) {
      for (const [key, value] of Object.entries(properties)) {
        amplitudeIdentify.set(key, value);
      }
    }

    const promise = this.amplitude.groupIdentify(groupType, groupName, amplitudeIdentify, extra);
    return { promise };
  }

  /**
   * Track event
   *
   * @param {Event} event The event to track.
   * @param {EventOptions} [options] Optional event options.
   * @param {MiddlewareExtra} [extra] Extra unstructured data for middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  track(event, options, extra) {
    if (!this.isInitializedAndEnabled()) {
      return { promise: getPromiseResponse(false) };
    }

    this.handleEventOptions(options);

    const promise = this.amplitude.logEvent(event.eventType, event.eventProperties, extra);
    return { promise };
  }

  /**
   * Flush pending events in queue
   *
   * @return {{promise: Promise<boolean>}}
   */
  flush() {
    if (!this.isInitializedAndEnabled()) {
      return { promise: getPromiseResponse(false) };
    }

    const promise = this.amplitude.uploadEvents();
    return { promise };
  }

  /**
   * EventMaxIntForTest
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/EventMaxIntForTest)
   *
   * Event to test schema validation
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {number} properties.intMax10 property to test schema validation
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventMaxIntForTest(properties, options, extra) {
    return this.track(new EventMaxIntForTest(properties), options, extra);
  }

  /**
   * Event No Properties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20No%20Properties)
   *
   * Event w no properties description
   *
   * Owner: Test codegen
   *
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventNoProperties(options, extra) {
    return this.track(new EventNoProperties(), options, extra);
  }

  /**
   * Event Object Types
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20Object%20Types)
   *
   * Event with Object and Object Array
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {*} properties.requiredObject Property Object Type
   * @param {*[]} properties.requiredObjectArray Property Object Array Type
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventObjectTypes(properties, options, extra) {
    return this.track(new EventObjectTypes(properties), options, extra);
  }

  /**
   * Event With All Properties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20All%20Properties)
   *
   * Event w all properties description
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {string} [properties.optionalString] Event 2 Property - Optional String    *     * Examples:    * Some string, or another
   * @param {string[]} properties.requiredArray Event 2 Property - Array
   * @param {boolean} properties.requiredBoolean Event 2 Property - Boolean
   * @param {'Enum1'|'Enum2'} properties.requiredEnum Event 2 Property - Enum
   * @param {number} properties.requiredInteger Event 2 Property - Integer    *     * Examples:    * 5, 4, 3
   * @param {number} properties.requiredNumber Event 2 Property - Number
   * @param {string} properties.requiredString Event 2 Property - String
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithAllProperties(properties, options, extra) {
    return this.track(new EventWithAllProperties(properties), options, extra);
  }

  /**
   * Event With Array Types
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Array%20Types)
   *
   * Description for event with Array Types
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {boolean[]} properties.requiredBooleanArray description for required boolean array
   * @param {number[]} properties.requiredNumberArray Description for required number array
   * @param {*[]} properties.requiredObjectArray Description for required object array
   * @param {string[]} properties.requiredStringArray description for required string array
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithArrayTypes(properties, options, extra) {
    return this.track(new EventWithArrayTypes(properties), options, extra);
  }

  /**
   * Event With Const Types
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Const%20Types)
   *
   * Description for event with const types
   *
   * Owner: Test codegen
   *
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithConstTypes(options, extra) {
    return this.track(new EventWithConstTypes(), options, extra);
  }

  /**
   * event withDifferent_CasingTypes
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/event%20withDifferent_CasingTypes)
   *
   * Description for case with space
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {'enumCamelCase'} properties.enumCamelCase descriptionForEnumCamelCase
   * @param {'EnumPascalCase'} properties.EnumPascalCase DescirptionForEnumPascalCase
   * @param {'enum_snake_case'} properties.enum_snake_case description_for_enum_snake_case
   * @param {'enum with space'} properties.enum with space Description for enum with space
   * @param {string} properties.propertyWithCamelCase descriptionForCamelCase
   * @param {string} properties.PropertyWithPascalCase DescriptionForPascalCase
   * @param {string} properties.property_with_snake_case Description_for_snake_case
   * @param {string} properties.property with space Description for case with space
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithDifferentCasingTypes(properties, options, extra) {
    return this.track(new EventWithDifferentCasingTypes(properties), options, extra);
  }

  /**
   * Event With Enum Types
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Enum%20Types)
   *
   * Description for event with enum types
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {'optional enum 1'|'optional enum 2'} [properties.optional enum] Description for required enum
   * @param {'required enum 1'|'required enum 2'} properties.required enum Description for optional enum
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithEnumTypes(properties, options, extra) {
    return this.track(new EventWithEnumTypes(properties), options, extra);
  }

  /**
   * Event With Optional Array Types
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Optional%20Array%20Types)
   *
   * Description for event with optional array types
   *
   * Owner: Test codegen
   *
   * @param {Object} [properties] The event's properties.
   * @param {boolean[]} [properties.optionalBooleanArray] Description for optional boolean array
   * @param {*[]} [properties.optionalJSONArray] Description for optional object array
   * @param {number[]} [properties.optionalNumberArray] Description for optional number array
   * @param {string[]} [properties.optionalStringArray] Description for optional string array
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithOptionalArrayTypes(properties, options, extra) {
    return this.track(new EventWithOptionalArrayTypes(properties), options, extra);
  }

  /**
   * Event With Optional Properties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Optional%20Properties)
   *
   * Event w optional properties description
   *
   * Owner: Test codegen
   *
   * @param {Object} [properties] The event's properties.
   * @param {number[]} [properties.optionalArrayNumber] Property has no description in tracking plan.
   * @param {string[]} [properties.optionalArrayString] Property has no description in tracking plan.
   * @param {boolean} [properties.optionalBoolean] Property has no description in tracking plan.
   * @param {number} [properties.optionalNumber] Property has no description in tracking plan.
   * @param {string} [properties.optionalString] Optional String property description
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithOptionalProperties(properties, options, extra) {
    return this.track(new EventWithOptionalProperties(properties), options, extra);
  }

  /**
   * Event With Template Properties
   *
   * [View in Tracking Plan](https://data.amplitude.com/test-codegen/Test%20Codegen/events/main/0.0.0/Event%20With%20Template%20Properties)
   *
   * Event with template properties description
   *
   * Owner: Test codegen
   *
   * @param {Object} properties The event's properties.
   * @param {number} [properties.optional_event_property] optional_event_property description
   * @param {number} [properties.optional_template_property] optional_template_property description
   * @param {string} properties.required_event_property required_event_property description
   * @param {string} properties.required_template_property required_template_property description
   * @param {EventOptions} [options] Options for this track call.
   * @param {MiddlewareExtra} [extra] Extra untyped parameters for use in middleware.
   *
   * @return {{promise: Promise<boolean>}}
   */
  eventWithTemplateProperties(properties, options, extra) {
    return this.track(new EventWithTemplateProperties(properties), options, extra);
  }

  /**
   @private
   * @param {EventOptions} [options]
   * @param {string} [userId]
   */
  handleEventOptions(options, userId) {
    if (userId || options?.userId) {
      this.amplitude?.setUserId(userId ?? options?.userId ?? null);
    }

    if (options?.deviceId) {
      this.amplitude?.setDeviceId(options.deviceId);
    }
  }
}

export const ampli = new Ampli();
